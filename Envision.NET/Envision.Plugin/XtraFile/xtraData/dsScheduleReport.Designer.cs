//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.9148
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Envision.Plugin.XtraFile.xtraData {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsScheduleReport")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsScheduleReport : global::System.Data.DataSet {
        
        private GBL_ENVDataTable tableGBL_ENV;
        
        private dataScheduleDataTable tabledataSchedule;
        
        private global::System.Data.DataRelation relationGBL_ENV_dataSchedule;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsScheduleReport() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsScheduleReport(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GBL_ENV"] != null)) {
                    base.Tables.Add(new GBL_ENVDataTable(ds.Tables["GBL_ENV"]));
                }
                if ((ds.Tables["dataSchedule"] != null)) {
                    base.Tables.Add(new dataScheduleDataTable(ds.Tables["dataSchedule"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GBL_ENVDataTable GBL_ENV {
            get {
                return this.tableGBL_ENV;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dataScheduleDataTable dataSchedule {
            get {
                return this.tabledataSchedule;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsScheduleReport cln = ((dsScheduleReport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GBL_ENV"] != null)) {
                    base.Tables.Add(new GBL_ENVDataTable(ds.Tables["GBL_ENV"]));
                }
                if ((ds.Tables["dataSchedule"] != null)) {
                    base.Tables.Add(new dataScheduleDataTable(ds.Tables["dataSchedule"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGBL_ENV = ((GBL_ENVDataTable)(base.Tables["GBL_ENV"]));
            if ((initTable == true)) {
                if ((this.tableGBL_ENV != null)) {
                    this.tableGBL_ENV.InitVars();
                }
            }
            this.tabledataSchedule = ((dataScheduleDataTable)(base.Tables["dataSchedule"]));
            if ((initTable == true)) {
                if ((this.tabledataSchedule != null)) {
                    this.tabledataSchedule.InitVars();
                }
            }
            this.relationGBL_ENV_dataSchedule = this.Relations["GBL_ENV_dataSchedule"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsScheduleReport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsScheduleReport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGBL_ENV = new GBL_ENVDataTable();
            base.Tables.Add(this.tableGBL_ENV);
            this.tabledataSchedule = new dataScheduleDataTable();
            base.Tables.Add(this.tabledataSchedule);
            this.relationGBL_ENV_dataSchedule = new global::System.Data.DataRelation("GBL_ENV_dataSchedule", new global::System.Data.DataColumn[] {
                        this.tableGBL_ENV.ORG_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tabledataSchedule.ORG_IDColumn}, false);
            this.Relations.Add(this.relationGBL_ENV_dataSchedule);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGBL_ENV() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedataSchedule() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsScheduleReport ds = new dsScheduleReport();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GBL_ENVRowChangeEventHandler(object sender, GBL_ENVRowChangeEvent e);
        
        public delegate void dataScheduleRowChangeEventHandler(object sender, dataScheduleRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GBL_ENVDataTable : global::System.Data.TypedTableBase<GBL_ENVRow> {
            
            private global::System.Data.DataColumn columnORG_ID;
            
            private global::System.Data.DataColumn columnORG_NAME;
            
            private global::System.Data.DataColumn columnORG_IMG;
            
            private global::System.Data.DataColumn columnORG_ADDR3;
            
            private global::System.Data.DataColumn columnORG_ADDR4;
            
            private global::System.Data.DataColumn columnVENDOR_H2;
            
            private global::System.Data.DataColumn columnENV_ADDR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GBL_ENVDataTable() {
                this.TableName = "GBL_ENV";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GBL_ENVDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GBL_ENVDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_IDColumn {
                get {
                    return this.columnORG_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_NAMEColumn {
                get {
                    return this.columnORG_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_IMGColumn {
                get {
                    return this.columnORG_IMG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_ADDR3Column {
                get {
                    return this.columnORG_ADDR3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_ADDR4Column {
                get {
                    return this.columnORG_ADDR4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VENDOR_H2Column {
                get {
                    return this.columnVENDOR_H2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ENV_ADDRColumn {
                get {
                    return this.columnENV_ADDR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GBL_ENVRow this[int index] {
                get {
                    return ((GBL_ENVRow)(this.Rows[index]));
                }
            }
            
            public event GBL_ENVRowChangeEventHandler GBL_ENVRowChanging;
            
            public event GBL_ENVRowChangeEventHandler GBL_ENVRowChanged;
            
            public event GBL_ENVRowChangeEventHandler GBL_ENVRowDeleting;
            
            public event GBL_ENVRowChangeEventHandler GBL_ENVRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGBL_ENVRow(GBL_ENVRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GBL_ENVRow AddGBL_ENVRow(int ORG_ID, string ORG_NAME, byte[] ORG_IMG, string ORG_ADDR3, string ORG_ADDR4, string VENDOR_H2, string ENV_ADDR) {
                GBL_ENVRow rowGBL_ENVRow = ((GBL_ENVRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ORG_ID,
                        ORG_NAME,
                        ORG_IMG,
                        ORG_ADDR3,
                        ORG_ADDR4,
                        VENDOR_H2,
                        ENV_ADDR};
                rowGBL_ENVRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGBL_ENVRow);
                return rowGBL_ENVRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GBL_ENVRow FindByORG_ID(int ORG_ID) {
                return ((GBL_ENVRow)(this.Rows.Find(new object[] {
                            ORG_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GBL_ENVDataTable cln = ((GBL_ENVDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GBL_ENVDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnORG_ID = base.Columns["ORG_ID"];
                this.columnORG_NAME = base.Columns["ORG_NAME"];
                this.columnORG_IMG = base.Columns["ORG_IMG"];
                this.columnORG_ADDR3 = base.Columns["ORG_ADDR3"];
                this.columnORG_ADDR4 = base.Columns["ORG_ADDR4"];
                this.columnVENDOR_H2 = base.Columns["VENDOR_H2"];
                this.columnENV_ADDR = base.Columns["ENV_ADDR"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnORG_ID = new global::System.Data.DataColumn("ORG_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_ID);
                this.columnORG_NAME = new global::System.Data.DataColumn("ORG_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_NAME);
                this.columnORG_IMG = new global::System.Data.DataColumn("ORG_IMG", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_IMG);
                this.columnORG_ADDR3 = new global::System.Data.DataColumn("ORG_ADDR3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_ADDR3);
                this.columnORG_ADDR4 = new global::System.Data.DataColumn("ORG_ADDR4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_ADDR4);
                this.columnVENDOR_H2 = new global::System.Data.DataColumn("VENDOR_H2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVENDOR_H2);
                this.columnENV_ADDR = new global::System.Data.DataColumn("ENV_ADDR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnENV_ADDR);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnORG_ID}, true));
                this.columnORG_ID.AllowDBNull = false;
                this.columnORG_ID.Unique = true;
                this.columnORG_NAME.MaxLength = 100;
                this.columnORG_ADDR3.MaxLength = 100;
                this.columnORG_ADDR4.MaxLength = 100;
                this.columnVENDOR_H2.MaxLength = 300;
                this.columnENV_ADDR.ReadOnly = true;
                this.columnENV_ADDR.MaxLength = 201;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GBL_ENVRow NewGBL_ENVRow() {
                return ((GBL_ENVRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GBL_ENVRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GBL_ENVRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GBL_ENVRowChanged != null)) {
                    this.GBL_ENVRowChanged(this, new GBL_ENVRowChangeEvent(((GBL_ENVRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GBL_ENVRowChanging != null)) {
                    this.GBL_ENVRowChanging(this, new GBL_ENVRowChangeEvent(((GBL_ENVRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GBL_ENVRowDeleted != null)) {
                    this.GBL_ENVRowDeleted(this, new GBL_ENVRowChangeEvent(((GBL_ENVRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GBL_ENVRowDeleting != null)) {
                    this.GBL_ENVRowDeleting(this, new GBL_ENVRowChangeEvent(((GBL_ENVRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGBL_ENVRow(GBL_ENVRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsScheduleReport ds = new dsScheduleReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GBL_ENVDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dataScheduleDataTable : global::System.Data.TypedTableBase<dataScheduleRow> {
            
            private global::System.Data.DataColumn columnORG_ID;
            
            private global::System.Data.DataColumn columnHN;
            
            private global::System.Data.DataColumn columnPAT_THAI_NAME;
            
            private global::System.Data.DataColumn columnPAT_ENG_NAME;
            
            private global::System.Data.DataColumn columnPHONE1;
            
            private global::System.Data.DataColumn columnDOB;
            
            private global::System.Data.DataColumn columnEXAM_UID;
            
            private global::System.Data.DataColumn columnEXAM_NAME;
            
            private global::System.Data.DataColumn columnAPPOINT_DT;
            
            private global::System.Data.DataColumn columnRATE;
            
            private global::System.Data.DataColumn columnCLINIC_TYPE_TEXT;
            
            private global::System.Data.DataColumn columnMODALITY_NAME;
            
            private global::System.Data.DataColumn columnCREATED_BY;
            
            private global::System.Data.DataColumn columnCREATED_ON;
            
            private global::System.Data.DataColumn columnMODALITY_ID;
            
            private global::System.Data.DataColumn columnINS_TEXT;
            
            private global::System.Data.DataColumn columnEXAM_TYPE_INS;
            
            private global::System.Data.DataColumn columnHR_UNIT_INS;
            
            private global::System.Data.DataColumn columnUNIT_TITLE;
            
            private global::System.Data.DataColumn columnUNIT_NAME;
            
            private global::System.Data.DataColumn columnAGE;
            
            private global::System.Data.DataColumn columnGENDER;
            
            private global::System.Data.DataColumn columnCLAIMABLE_AMT;
            
            private global::System.Data.DataColumn columnNONCLAIMABLE_AMT;
            
            private global::System.Data.DataColumn columnROOM_UID;
            
            private global::System.Data.DataColumn columnINSURANCE_TYPE_DESC;
            
            private global::System.Data.DataColumn columnPATIENT_ID_LABEL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataScheduleDataTable() {
                this.TableName = "dataSchedule";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dataScheduleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dataScheduleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_IDColumn {
                get {
                    return this.columnORG_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HNColumn {
                get {
                    return this.columnHN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAT_THAI_NAMEColumn {
                get {
                    return this.columnPAT_THAI_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAT_ENG_NAMEColumn {
                get {
                    return this.columnPAT_ENG_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PHONE1Column {
                get {
                    return this.columnPHONE1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_UIDColumn {
                get {
                    return this.columnEXAM_UID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_NAMEColumn {
                get {
                    return this.columnEXAM_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APPOINT_DTColumn {
                get {
                    return this.columnAPPOINT_DT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RATEColumn {
                get {
                    return this.columnRATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLINIC_TYPE_TEXTColumn {
                get {
                    return this.columnCLINIC_TYPE_TEXT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODALITY_NAMEColumn {
                get {
                    return this.columnMODALITY_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATED_BYColumn {
                get {
                    return this.columnCREATED_BY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATED_ONColumn {
                get {
                    return this.columnCREATED_ON;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODALITY_IDColumn {
                get {
                    return this.columnMODALITY_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INS_TEXTColumn {
                get {
                    return this.columnINS_TEXT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_TYPE_INSColumn {
                get {
                    return this.columnEXAM_TYPE_INS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HR_UNIT_INSColumn {
                get {
                    return this.columnHR_UNIT_INS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNIT_TITLEColumn {
                get {
                    return this.columnUNIT_TITLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNIT_NAMEColumn {
                get {
                    return this.columnUNIT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AGEColumn {
                get {
                    return this.columnAGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GENDERColumn {
                get {
                    return this.columnGENDER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLAIMABLE_AMTColumn {
                get {
                    return this.columnCLAIMABLE_AMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NONCLAIMABLE_AMTColumn {
                get {
                    return this.columnNONCLAIMABLE_AMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROOM_UIDColumn {
                get {
                    return this.columnROOM_UID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INSURANCE_TYPE_DESCColumn {
                get {
                    return this.columnINSURANCE_TYPE_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_ID_LABELColumn {
                get {
                    return this.columnPATIENT_ID_LABEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataScheduleRow this[int index] {
                get {
                    return ((dataScheduleRow)(this.Rows[index]));
                }
            }
            
            public event dataScheduleRowChangeEventHandler dataScheduleRowChanging;
            
            public event dataScheduleRowChangeEventHandler dataScheduleRowChanged;
            
            public event dataScheduleRowChangeEventHandler dataScheduleRowDeleting;
            
            public event dataScheduleRowChangeEventHandler dataScheduleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddataScheduleRow(dataScheduleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataScheduleRow AdddataScheduleRow(
                        GBL_ENVRow parentGBL_ENVRowByGBL_ENV_dataSchedule, 
                        string HN, 
                        string PAT_THAI_NAME, 
                        string PAT_ENG_NAME, 
                        string PHONE1, 
                        System.DateTime DOB, 
                        string EXAM_UID, 
                        string EXAM_NAME, 
                        System.DateTime APPOINT_DT, 
                        decimal RATE, 
                        string CLINIC_TYPE_TEXT, 
                        string MODALITY_NAME, 
                        string CREATED_BY, 
                        System.DateTime CREATED_ON, 
                        string INS_TEXT, 
                        string EXAM_TYPE_INS, 
                        string HR_UNIT_INS, 
                        string UNIT_TITLE, 
                        string UNIT_NAME, 
                        string AGE, 
                        string GENDER, 
                        decimal CLAIMABLE_AMT, 
                        decimal NONCLAIMABLE_AMT, 
                        string ROOM_UID, 
                        string INSURANCE_TYPE_DESC, 
                        string PATIENT_ID_LABEL) {
                dataScheduleRow rowdataScheduleRow = ((dataScheduleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        HN,
                        PAT_THAI_NAME,
                        PAT_ENG_NAME,
                        PHONE1,
                        DOB,
                        EXAM_UID,
                        EXAM_NAME,
                        APPOINT_DT,
                        RATE,
                        CLINIC_TYPE_TEXT,
                        MODALITY_NAME,
                        CREATED_BY,
                        CREATED_ON,
                        null,
                        INS_TEXT,
                        EXAM_TYPE_INS,
                        HR_UNIT_INS,
                        UNIT_TITLE,
                        UNIT_NAME,
                        AGE,
                        GENDER,
                        CLAIMABLE_AMT,
                        NONCLAIMABLE_AMT,
                        ROOM_UID,
                        INSURANCE_TYPE_DESC,
                        PATIENT_ID_LABEL};
                if ((parentGBL_ENVRowByGBL_ENV_dataSchedule != null)) {
                    columnValuesArray[0] = parentGBL_ENVRowByGBL_ENV_dataSchedule[0];
                }
                rowdataScheduleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdataScheduleRow);
                return rowdataScheduleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataScheduleRow FindByMODALITY_ID(int MODALITY_ID) {
                return ((dataScheduleRow)(this.Rows.Find(new object[] {
                            MODALITY_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dataScheduleDataTable cln = ((dataScheduleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dataScheduleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnORG_ID = base.Columns["ORG_ID"];
                this.columnHN = base.Columns["HN"];
                this.columnPAT_THAI_NAME = base.Columns["PAT_THAI_NAME"];
                this.columnPAT_ENG_NAME = base.Columns["PAT_ENG_NAME"];
                this.columnPHONE1 = base.Columns["PHONE1"];
                this.columnDOB = base.Columns["DOB"];
                this.columnEXAM_UID = base.Columns["EXAM_UID"];
                this.columnEXAM_NAME = base.Columns["EXAM_NAME"];
                this.columnAPPOINT_DT = base.Columns["APPOINT_DT"];
                this.columnRATE = base.Columns["RATE"];
                this.columnCLINIC_TYPE_TEXT = base.Columns["CLINIC_TYPE_TEXT"];
                this.columnMODALITY_NAME = base.Columns["MODALITY_NAME"];
                this.columnCREATED_BY = base.Columns["CREATED_BY"];
                this.columnCREATED_ON = base.Columns["CREATED_ON"];
                this.columnMODALITY_ID = base.Columns["MODALITY_ID"];
                this.columnINS_TEXT = base.Columns["INS_TEXT"];
                this.columnEXAM_TYPE_INS = base.Columns["EXAM_TYPE_INS"];
                this.columnHR_UNIT_INS = base.Columns["HR_UNIT_INS"];
                this.columnUNIT_TITLE = base.Columns["UNIT_TITLE"];
                this.columnUNIT_NAME = base.Columns["UNIT_NAME"];
                this.columnAGE = base.Columns["AGE"];
                this.columnGENDER = base.Columns["GENDER"];
                this.columnCLAIMABLE_AMT = base.Columns["CLAIMABLE_AMT"];
                this.columnNONCLAIMABLE_AMT = base.Columns["NONCLAIMABLE_AMT"];
                this.columnROOM_UID = base.Columns["ROOM_UID"];
                this.columnINSURANCE_TYPE_DESC = base.Columns["INSURANCE_TYPE_DESC"];
                this.columnPATIENT_ID_LABEL = base.Columns["PATIENT_ID_LABEL"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnORG_ID = new global::System.Data.DataColumn("ORG_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_ID);
                this.columnHN = new global::System.Data.DataColumn("HN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHN);
                this.columnPAT_THAI_NAME = new global::System.Data.DataColumn("PAT_THAI_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAT_THAI_NAME);
                this.columnPAT_ENG_NAME = new global::System.Data.DataColumn("PAT_ENG_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAT_ENG_NAME);
                this.columnPHONE1 = new global::System.Data.DataColumn("PHONE1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHONE1);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
                this.columnEXAM_UID = new global::System.Data.DataColumn("EXAM_UID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_UID);
                this.columnEXAM_NAME = new global::System.Data.DataColumn("EXAM_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_NAME);
                this.columnAPPOINT_DT = new global::System.Data.DataColumn("APPOINT_DT", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPPOINT_DT);
                this.columnRATE = new global::System.Data.DataColumn("RATE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRATE);
                this.columnCLINIC_TYPE_TEXT = new global::System.Data.DataColumn("CLINIC_TYPE_TEXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLINIC_TYPE_TEXT);
                this.columnMODALITY_NAME = new global::System.Data.DataColumn("MODALITY_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODALITY_NAME);
                this.columnCREATED_BY = new global::System.Data.DataColumn("CREATED_BY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATED_BY);
                this.columnCREATED_ON = new global::System.Data.DataColumn("CREATED_ON", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATED_ON);
                this.columnMODALITY_ID = new global::System.Data.DataColumn("MODALITY_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODALITY_ID);
                this.columnINS_TEXT = new global::System.Data.DataColumn("INS_TEXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINS_TEXT);
                this.columnEXAM_TYPE_INS = new global::System.Data.DataColumn("EXAM_TYPE_INS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_TYPE_INS);
                this.columnHR_UNIT_INS = new global::System.Data.DataColumn("HR_UNIT_INS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHR_UNIT_INS);
                this.columnUNIT_TITLE = new global::System.Data.DataColumn("UNIT_TITLE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT_TITLE);
                this.columnUNIT_NAME = new global::System.Data.DataColumn("UNIT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT_NAME);
                this.columnAGE = new global::System.Data.DataColumn("AGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAGE);
                this.columnGENDER = new global::System.Data.DataColumn("GENDER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGENDER);
                this.columnCLAIMABLE_AMT = new global::System.Data.DataColumn("CLAIMABLE_AMT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLAIMABLE_AMT);
                this.columnNONCLAIMABLE_AMT = new global::System.Data.DataColumn("NONCLAIMABLE_AMT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNONCLAIMABLE_AMT);
                this.columnROOM_UID = new global::System.Data.DataColumn("ROOM_UID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROOM_UID);
                this.columnINSURANCE_TYPE_DESC = new global::System.Data.DataColumn("INSURANCE_TYPE_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINSURANCE_TYPE_DESC);
                this.columnPATIENT_ID_LABEL = new global::System.Data.DataColumn("PATIENT_ID_LABEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID_LABEL);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMODALITY_ID}, true));
                this.columnHN.AllowDBNull = false;
                this.columnHN.MaxLength = 30;
                this.columnPAT_THAI_NAME.ReadOnly = true;
                this.columnPAT_THAI_NAME.MaxLength = 500;
                this.columnPAT_ENG_NAME.ReadOnly = true;
                this.columnPAT_ENG_NAME.MaxLength = 500;
                this.columnPHONE1.MaxLength = 100;
                this.columnEXAM_UID.MaxLength = 30;
                this.columnEXAM_NAME.AllowDBNull = false;
                this.columnEXAM_NAME.MaxLength = 300;
                this.columnAPPOINT_DT.AllowDBNull = false;
                this.columnRATE.ReadOnly = true;
                this.columnCLINIC_TYPE_TEXT.ReadOnly = true;
                this.columnCLINIC_TYPE_TEXT.MaxLength = 2147483647;
                this.columnMODALITY_NAME.MaxLength = 100;
                this.columnCREATED_BY.ReadOnly = true;
                this.columnCREATED_BY.MaxLength = 2147483647;
                this.columnMODALITY_ID.AutoIncrement = true;
                this.columnMODALITY_ID.AutoIncrementSeed = -1;
                this.columnMODALITY_ID.AutoIncrementStep = -1;
                this.columnMODALITY_ID.AllowDBNull = false;
                this.columnMODALITY_ID.ReadOnly = true;
                this.columnMODALITY_ID.Unique = true;
                this.columnINS_TEXT.ReadOnly = true;
                this.columnINS_TEXT.MaxLength = 1;
                this.columnEXAM_TYPE_INS.ReadOnly = true;
                this.columnEXAM_TYPE_INS.MaxLength = 1;
                this.columnHR_UNIT_INS.ReadOnly = true;
                this.columnHR_UNIT_INS.MaxLength = 1;
                this.columnUNIT_TITLE.MaxLength = 100;
                this.columnUNIT_NAME.ReadOnly = true;
                this.columnUNIT_NAME.MaxLength = 2147483647;
                this.columnAGE.ReadOnly = true;
                this.columnAGE.MaxLength = 1;
                this.columnGENDER.ReadOnly = true;
                this.columnGENDER.MaxLength = 1;
                this.columnROOM_UID.MaxLength = 30;
                this.columnINSURANCE_TYPE_DESC.ReadOnly = true;
                this.columnINSURANCE_TYPE_DESC.MaxLength = 100;
                this.columnPATIENT_ID_LABEL.ReadOnly = true;
                this.columnPATIENT_ID_LABEL.MaxLength = 1;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataScheduleRow NewdataScheduleRow() {
                return ((dataScheduleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dataScheduleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dataScheduleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dataScheduleRowChanged != null)) {
                    this.dataScheduleRowChanged(this, new dataScheduleRowChangeEvent(((dataScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dataScheduleRowChanging != null)) {
                    this.dataScheduleRowChanging(this, new dataScheduleRowChangeEvent(((dataScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dataScheduleRowDeleted != null)) {
                    this.dataScheduleRowDeleted(this, new dataScheduleRowChangeEvent(((dataScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dataScheduleRowDeleting != null)) {
                    this.dataScheduleRowDeleting(this, new dataScheduleRowChangeEvent(((dataScheduleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedataScheduleRow(dataScheduleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsScheduleReport ds = new dsScheduleReport();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dataScheduleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GBL_ENVRow : global::System.Data.DataRow {
            
            private GBL_ENVDataTable tableGBL_ENV;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GBL_ENVRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGBL_ENV = ((GBL_ENVDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ORG_ID {
                get {
                    return ((int)(this[this.tableGBL_ENV.ORG_IDColumn]));
                }
                set {
                    this[this.tableGBL_ENV.ORG_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_NAME {
                get {
                    try {
                        return ((string)(this[this.tableGBL_ENV.ORG_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_NAME\' in table \'GBL_ENV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGBL_ENV.ORG_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ORG_IMG {
                get {
                    try {
                        return ((byte[])(this[this.tableGBL_ENV.ORG_IMGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_IMG\' in table \'GBL_ENV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGBL_ENV.ORG_IMGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_ADDR3 {
                get {
                    try {
                        return ((string)(this[this.tableGBL_ENV.ORG_ADDR3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_ADDR3\' in table \'GBL_ENV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGBL_ENV.ORG_ADDR3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_ADDR4 {
                get {
                    try {
                        return ((string)(this[this.tableGBL_ENV.ORG_ADDR4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_ADDR4\' in table \'GBL_ENV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGBL_ENV.ORG_ADDR4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VENDOR_H2 {
                get {
                    try {
                        return ((string)(this[this.tableGBL_ENV.VENDOR_H2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VENDOR_H2\' in table \'GBL_ENV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGBL_ENV.VENDOR_H2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ENV_ADDR {
                get {
                    try {
                        return ((string)(this[this.tableGBL_ENV.ENV_ADDRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ENV_ADDR\' in table \'GBL_ENV\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGBL_ENV.ENV_ADDRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_NAMENull() {
                return this.IsNull(this.tableGBL_ENV.ORG_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_NAMENull() {
                this[this.tableGBL_ENV.ORG_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_IMGNull() {
                return this.IsNull(this.tableGBL_ENV.ORG_IMGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_IMGNull() {
                this[this.tableGBL_ENV.ORG_IMGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_ADDR3Null() {
                return this.IsNull(this.tableGBL_ENV.ORG_ADDR3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_ADDR3Null() {
                this[this.tableGBL_ENV.ORG_ADDR3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_ADDR4Null() {
                return this.IsNull(this.tableGBL_ENV.ORG_ADDR4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_ADDR4Null() {
                this[this.tableGBL_ENV.ORG_ADDR4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVENDOR_H2Null() {
                return this.IsNull(this.tableGBL_ENV.VENDOR_H2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVENDOR_H2Null() {
                this[this.tableGBL_ENV.VENDOR_H2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsENV_ADDRNull() {
                return this.IsNull(this.tableGBL_ENV.ENV_ADDRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetENV_ADDRNull() {
                this[this.tableGBL_ENV.ENV_ADDRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataScheduleRow[] GetdataScheduleRows() {
                if ((this.Table.ChildRelations["GBL_ENV_dataSchedule"] == null)) {
                    return new dataScheduleRow[0];
                }
                else {
                    return ((dataScheduleRow[])(base.GetChildRows(this.Table.ChildRelations["GBL_ENV_dataSchedule"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dataScheduleRow : global::System.Data.DataRow {
            
            private dataScheduleDataTable tabledataSchedule;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dataScheduleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledataSchedule = ((dataScheduleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ORG_ID {
                get {
                    try {
                        return ((int)(this[this.tabledataSchedule.ORG_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_ID\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.ORG_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HN {
                get {
                    return ((string)(this[this.tabledataSchedule.HNColumn]));
                }
                set {
                    this[this.tabledataSchedule.HNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAT_THAI_NAME {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.PAT_THAI_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAT_THAI_NAME\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.PAT_THAI_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAT_ENG_NAME {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.PAT_ENG_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAT_ENG_NAME\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.PAT_ENG_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PHONE1 {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.PHONE1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PHONE1\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.PHONE1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOB {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledataSchedule.DOBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOB\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_UID {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.EXAM_UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXAM_UID\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.EXAM_UIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_NAME {
                get {
                    return ((string)(this[this.tabledataSchedule.EXAM_NAMEColumn]));
                }
                set {
                    this[this.tabledataSchedule.EXAM_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime APPOINT_DT {
                get {
                    return ((global::System.DateTime)(this[this.tabledataSchedule.APPOINT_DTColumn]));
                }
                set {
                    this[this.tabledataSchedule.APPOINT_DTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RATE {
                get {
                    try {
                        return ((decimal)(this[this.tabledataSchedule.RATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RATE\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.RATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLINIC_TYPE_TEXT {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.CLINIC_TYPE_TEXTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLINIC_TYPE_TEXT\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.CLINIC_TYPE_TEXTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODALITY_NAME {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.MODALITY_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MODALITY_NAME\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.MODALITY_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATED_BY {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.CREATED_BYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATED_BY\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.CREATED_BYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATED_ON {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledataSchedule.CREATED_ONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATED_ON\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.CREATED_ONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MODALITY_ID {
                get {
                    return ((int)(this[this.tabledataSchedule.MODALITY_IDColumn]));
                }
                set {
                    this[this.tabledataSchedule.MODALITY_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INS_TEXT {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.INS_TEXTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INS_TEXT\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.INS_TEXTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_TYPE_INS {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.EXAM_TYPE_INSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXAM_TYPE_INS\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.EXAM_TYPE_INSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HR_UNIT_INS {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.HR_UNIT_INSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HR_UNIT_INS\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.HR_UNIT_INSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIT_TITLE {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.UNIT_TITLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNIT_TITLE\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.UNIT_TITLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIT_NAME {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.UNIT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNIT_NAME\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.UNIT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AGE {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.AGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AGE\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.AGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GENDER {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.GENDERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GENDER\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.GENDERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CLAIMABLE_AMT {
                get {
                    try {
                        return ((decimal)(this[this.tabledataSchedule.CLAIMABLE_AMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLAIMABLE_AMT\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.CLAIMABLE_AMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal NONCLAIMABLE_AMT {
                get {
                    try {
                        return ((decimal)(this[this.tabledataSchedule.NONCLAIMABLE_AMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NONCLAIMABLE_AMT\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.NONCLAIMABLE_AMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ROOM_UID {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.ROOM_UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ROOM_UID\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.ROOM_UIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INSURANCE_TYPE_DESC {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.INSURANCE_TYPE_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INSURANCE_TYPE_DESC\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.INSURANCE_TYPE_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_ID_LABEL {
                get {
                    try {
                        return ((string)(this[this.tabledataSchedule.PATIENT_ID_LABELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PATIENT_ID_LABEL\' in table \'dataSchedule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledataSchedule.PATIENT_ID_LABELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GBL_ENVRow GBL_ENVRow {
                get {
                    return ((GBL_ENVRow)(this.GetParentRow(this.Table.ParentRelations["GBL_ENV_dataSchedule"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["GBL_ENV_dataSchedule"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_IDNull() {
                return this.IsNull(this.tabledataSchedule.ORG_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_IDNull() {
                this[this.tabledataSchedule.ORG_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAT_THAI_NAMENull() {
                return this.IsNull(this.tabledataSchedule.PAT_THAI_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAT_THAI_NAMENull() {
                this[this.tabledataSchedule.PAT_THAI_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAT_ENG_NAMENull() {
                return this.IsNull(this.tabledataSchedule.PAT_ENG_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAT_ENG_NAMENull() {
                this[this.tabledataSchedule.PAT_ENG_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHONE1Null() {
                return this.IsNull(this.tabledataSchedule.PHONE1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHONE1Null() {
                this[this.tabledataSchedule.PHONE1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOBNull() {
                return this.IsNull(this.tabledataSchedule.DOBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOBNull() {
                this[this.tabledataSchedule.DOBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXAM_UIDNull() {
                return this.IsNull(this.tabledataSchedule.EXAM_UIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXAM_UIDNull() {
                this[this.tabledataSchedule.EXAM_UIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRATENull() {
                return this.IsNull(this.tabledataSchedule.RATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRATENull() {
                this[this.tabledataSchedule.RATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLINIC_TYPE_TEXTNull() {
                return this.IsNull(this.tabledataSchedule.CLINIC_TYPE_TEXTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLINIC_TYPE_TEXTNull() {
                this[this.tabledataSchedule.CLINIC_TYPE_TEXTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODALITY_NAMENull() {
                return this.IsNull(this.tabledataSchedule.MODALITY_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODALITY_NAMENull() {
                this[this.tabledataSchedule.MODALITY_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATED_BYNull() {
                return this.IsNull(this.tabledataSchedule.CREATED_BYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATED_BYNull() {
                this[this.tabledataSchedule.CREATED_BYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATED_ONNull() {
                return this.IsNull(this.tabledataSchedule.CREATED_ONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATED_ONNull() {
                this[this.tabledataSchedule.CREATED_ONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINS_TEXTNull() {
                return this.IsNull(this.tabledataSchedule.INS_TEXTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINS_TEXTNull() {
                this[this.tabledataSchedule.INS_TEXTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXAM_TYPE_INSNull() {
                return this.IsNull(this.tabledataSchedule.EXAM_TYPE_INSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXAM_TYPE_INSNull() {
                this[this.tabledataSchedule.EXAM_TYPE_INSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHR_UNIT_INSNull() {
                return this.IsNull(this.tabledataSchedule.HR_UNIT_INSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHR_UNIT_INSNull() {
                this[this.tabledataSchedule.HR_UNIT_INSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNIT_TITLENull() {
                return this.IsNull(this.tabledataSchedule.UNIT_TITLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNIT_TITLENull() {
                this[this.tabledataSchedule.UNIT_TITLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNIT_NAMENull() {
                return this.IsNull(this.tabledataSchedule.UNIT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNIT_NAMENull() {
                this[this.tabledataSchedule.UNIT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAGENull() {
                return this.IsNull(this.tabledataSchedule.AGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAGENull() {
                this[this.tabledataSchedule.AGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGENDERNull() {
                return this.IsNull(this.tabledataSchedule.GENDERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGENDERNull() {
                this[this.tabledataSchedule.GENDERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLAIMABLE_AMTNull() {
                return this.IsNull(this.tabledataSchedule.CLAIMABLE_AMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLAIMABLE_AMTNull() {
                this[this.tabledataSchedule.CLAIMABLE_AMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNONCLAIMABLE_AMTNull() {
                return this.IsNull(this.tabledataSchedule.NONCLAIMABLE_AMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNONCLAIMABLE_AMTNull() {
                this[this.tabledataSchedule.NONCLAIMABLE_AMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROOM_UIDNull() {
                return this.IsNull(this.tabledataSchedule.ROOM_UIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROOM_UIDNull() {
                this[this.tabledataSchedule.ROOM_UIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINSURANCE_TYPE_DESCNull() {
                return this.IsNull(this.tabledataSchedule.INSURANCE_TYPE_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINSURANCE_TYPE_DESCNull() {
                this[this.tabledataSchedule.INSURANCE_TYPE_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_ID_LABELNull() {
                return this.IsNull(this.tabledataSchedule.PATIENT_ID_LABELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_ID_LABELNull() {
                this[this.tabledataSchedule.PATIENT_ID_LABELColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GBL_ENVRowChangeEvent : global::System.EventArgs {
            
            private GBL_ENVRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GBL_ENVRowChangeEvent(GBL_ENVRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GBL_ENVRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dataScheduleRowChangeEvent : global::System.EventArgs {
            
            private dataScheduleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataScheduleRowChangeEvent(dataScheduleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dataScheduleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Envision.Plugin.XtraFile.xtraData.dsScheduleReportTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GBL_ENVTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GBL_ENVTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GBL_ENV";
            tableMapping.ColumnMappings.Add("ORG_ID", "ORG_ID");
            tableMapping.ColumnMappings.Add("ORG_NAME", "ORG_NAME");
            tableMapping.ColumnMappings.Add("ORG_IMG", "ORG_IMG");
            tableMapping.ColumnMappings.Add("ORG_ADDR3", "ORG_ADDR3");
            tableMapping.ColumnMappings.Add("ORG_ADDR4", "ORG_ADDR4");
            tableMapping.ColumnMappings.Add("VENDOR_H2", "VENDOR_H2");
            tableMapping.ColumnMappings.Add("ENV_ADDR", "ENV_ADDR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [GBL_ENV] WHERE (([ORG_ID] = @Original_ORG_ID) AND ((@IsNull_ORG_NAME = 1 AND [ORG_NAME] IS NULL) OR ([ORG_NAME] = @Original_ORG_NAME)) AND ((@IsNull_ORG_ADDR3 = 1 AND [ORG_ADDR3] IS NULL) OR ([ORG_ADDR3] = @Original_ORG_ADDR3)) AND ((@IsNull_ORG_ADDR4 = 1 AND [ORG_ADDR4] IS NULL) OR ([ORG_ADDR4] = @Original_ORG_ADDR4)) AND ((@IsNull_VENDOR_H2 = 1 AND [VENDOR_H2] IS NULL) OR ([VENDOR_H2] = @Original_VENDOR_H2)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ORG_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ORG_NAME", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_NAME", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ORG_NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ORG_ADDR3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ADDR3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ORG_ADDR3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ADDR3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ORG_ADDR4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ADDR4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ORG_ADDR4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ADDR4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VENDOR_H2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VENDOR_H2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VENDOR_H2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VENDOR_H2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [GBL_ENV] ([ORG_ID], [ORG_NAME], [ORG_IMG], [ORG_ADDR3], [ORG_ADDR4], [VENDOR_H2]) VALUES (@ORG_ID, @ORG_NAME, @ORG_IMG, @ORG_ADDR3, @ORG_ADDR4, @VENDOR_H2);
SELECT ORG_ID, ORG_NAME, ORG_IMG, ORG_ADDR3, ORG_ADDR4, VENDOR_H2, ORG_ADDR3 + ' ' + ORG_ADDR4 AS ENV_ADDR FROM GBL_ENV WHERE (ORG_ID = @ORG_ID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORG_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORG_NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORG_IMG", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_IMG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORG_ADDR3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ADDR3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORG_ADDR4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ADDR4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VENDOR_H2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VENDOR_H2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [GBL_ENV] SET [ORG_ID] = @ORG_ID, [ORG_NAME] = @ORG_NAME, [ORG_IMG] = @ORG_IMG, [ORG_ADDR3] = @ORG_ADDR3, [ORG_ADDR4] = @ORG_ADDR4, [VENDOR_H2] = @VENDOR_H2 WHERE (([ORG_ID] = @Original_ORG_ID) AND ((@IsNull_ORG_NAME = 1 AND [ORG_NAME] IS NULL) OR ([ORG_NAME] = @Original_ORG_NAME)) AND ((@IsNull_ORG_ADDR3 = 1 AND [ORG_ADDR3] IS NULL) OR ([ORG_ADDR3] = @Original_ORG_ADDR3)) AND ((@IsNull_ORG_ADDR4 = 1 AND [ORG_ADDR4] IS NULL) OR ([ORG_ADDR4] = @Original_ORG_ADDR4)) AND ((@IsNull_VENDOR_H2 = 1 AND [VENDOR_H2] IS NULL) OR ([VENDOR_H2] = @Original_VENDOR_H2)));
SELECT ORG_ID, ORG_NAME, ORG_IMG, ORG_ADDR3, ORG_ADDR4, VENDOR_H2, ORG_ADDR3 + ' ' + ORG_ADDR4 AS ENV_ADDR FROM GBL_ENV WHERE (ORG_ID = @ORG_ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORG_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORG_NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORG_IMG", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_IMG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORG_ADDR3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ADDR3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORG_ADDR4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ADDR4", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VENDOR_H2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VENDOR_H2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ORG_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ORG_NAME", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_NAME", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ORG_NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_NAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ORG_ADDR3", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ADDR3", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ORG_ADDR3", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ADDR3", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ORG_ADDR4", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ADDR4", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ORG_ADDR4", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ORG_ADDR4", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_VENDOR_H2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VENDOR_H2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VENDOR_H2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VENDOR_H2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Envision.Plugin.Properties.Settings.Default.RIS_RAMAConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "select \r\nGBL_ENV.ORG_ID\r\n,GBL_ENV.ORG_NAME\r\n\t\t, GBL_ENV.ORG_IMG\r\n\t\t\t\t\t, GBL_ENV.O" +
                "RG_ADDR3\r\n\t\t\t\t\t, GBL_ENV.ORG_ADDR4\r\n\t\t\t\t\t, GBL_ENV.VENDOR_H2\r\n\t\t\t\t\t, GBL_ENV.ORG" +
                "_ADDR3+\' \'+GBL_ENV.ORG_ADDR4 as ENV_ADDR\r\n\t\t\t\t\t\r\nfrom GBL_ENV";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsScheduleReport.GBL_ENVDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsScheduleReport.GBL_ENVDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsScheduleReport.GBL_ENVDataTable dataTable = new dsScheduleReport.GBL_ENVDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsScheduleReport.GBL_ENVDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(dsScheduleReport dataSet) {
            return this.Adapter.Update(dataSet, "GBL_ENV");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ORG_ID, string Original_ORG_NAME, string Original_ORG_ADDR3, string Original_ORG_ADDR4, string Original_VENDOR_H2) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ORG_ID));
            if ((Original_ORG_NAME == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ORG_NAME));
            }
            if ((Original_ORG_ADDR3 == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_ORG_ADDR3));
            }
            if ((Original_ORG_ADDR4 == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_ORG_ADDR4));
            }
            if ((Original_VENDOR_H2 == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_VENDOR_H2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ORG_ID, string ORG_NAME, byte[] ORG_IMG, string ORG_ADDR3, string ORG_ADDR4, string VENDOR_H2) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ORG_ID));
            if ((ORG_NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ORG_NAME));
            }
            if ((ORG_IMG == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((byte[])(ORG_IMG));
            }
            if ((ORG_ADDR3 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ORG_ADDR3));
            }
            if ((ORG_ADDR4 == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ORG_ADDR4));
            }
            if ((VENDOR_H2 == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(VENDOR_H2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ORG_ID, string ORG_NAME, byte[] ORG_IMG, string ORG_ADDR3, string ORG_ADDR4, string VENDOR_H2, int Original_ORG_ID, string Original_ORG_NAME, string Original_ORG_ADDR3, string Original_ORG_ADDR4, string Original_VENDOR_H2) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ORG_ID));
            if ((ORG_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ORG_NAME));
            }
            if ((ORG_IMG == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((byte[])(ORG_IMG));
            }
            if ((ORG_ADDR3 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ORG_ADDR3));
            }
            if ((ORG_ADDR4 == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ORG_ADDR4));
            }
            if ((VENDOR_H2 == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(VENDOR_H2));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_ORG_ID));
            if ((Original_ORG_NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_ORG_NAME));
            }
            if ((Original_ORG_ADDR3 == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_ORG_ADDR3));
            }
            if ((Original_ORG_ADDR4 == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_ORG_ADDR4));
            }
            if ((Original_VENDOR_H2 == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_VENDOR_H2));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ORG_NAME, byte[] ORG_IMG, string ORG_ADDR3, string ORG_ADDR4, string VENDOR_H2, int Original_ORG_ID, string Original_ORG_NAME, string Original_ORG_ADDR3, string Original_ORG_ADDR4, string Original_VENDOR_H2) {
            return this.Update(Original_ORG_ID, ORG_NAME, ORG_IMG, ORG_ADDR3, ORG_ADDR4, VENDOR_H2, Original_ORG_ID, Original_ORG_NAME, Original_ORG_ADDR3, Original_ORG_ADDR4, Original_VENDOR_H2);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class dataScheduleTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dataScheduleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "dataSchedule";
            tableMapping.ColumnMappings.Add("ORG_ID", "ORG_ID");
            tableMapping.ColumnMappings.Add("HN", "HN");
            tableMapping.ColumnMappings.Add("PAT_THAI_NAME", "PAT_THAI_NAME");
            tableMapping.ColumnMappings.Add("PAT_ENG_NAME", "PAT_ENG_NAME");
            tableMapping.ColumnMappings.Add("PHONE1", "PHONE1");
            tableMapping.ColumnMappings.Add("DOB", "DOB");
            tableMapping.ColumnMappings.Add("EXAM_UID", "EXAM_UID");
            tableMapping.ColumnMappings.Add("EXAM_NAME", "EXAM_NAME");
            tableMapping.ColumnMappings.Add("APPOINT_DT", "APPOINT_DT");
            tableMapping.ColumnMappings.Add("RATE", "RATE");
            tableMapping.ColumnMappings.Add("CLINIC_TYPE_TEXT", "CLINIC_TYPE_TEXT");
            tableMapping.ColumnMappings.Add("MODALITY_NAME", "MODALITY_NAME");
            tableMapping.ColumnMappings.Add("CREATED_BY", "CREATED_BY");
            tableMapping.ColumnMappings.Add("CREATED_ON", "CREATED_ON");
            tableMapping.ColumnMappings.Add("MODALITY_ID", "MODALITY_ID");
            tableMapping.ColumnMappings.Add("INS_TEXT", "INS_TEXT");
            tableMapping.ColumnMappings.Add("EXAM_TYPE_INS", "EXAM_TYPE_INS");
            tableMapping.ColumnMappings.Add("HR_UNIT_INS", "HR_UNIT_INS");
            tableMapping.ColumnMappings.Add("UNIT_TITLE", "UNIT_TITLE");
            tableMapping.ColumnMappings.Add("UNIT_NAME", "UNIT_NAME");
            tableMapping.ColumnMappings.Add("AGE", "AGE");
            tableMapping.ColumnMappings.Add("GENDER", "GENDER");
            tableMapping.ColumnMappings.Add("CLAIMABLE_AMT", "CLAIMABLE_AMT");
            tableMapping.ColumnMappings.Add("NONCLAIMABLE_AMT", "NONCLAIMABLE_AMT");
            tableMapping.ColumnMappings.Add("ROOM_UID", "ROOM_UID");
            tableMapping.ColumnMappings.Add("INSURANCE_TYPE_DESC", "INSURANCE_TYPE_DESC");
            tableMapping.ColumnMappings.Add("PATIENT_ID_LABEL", "PATIENT_ID_LABEL");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Envision.Plugin.Properties.Settings.Default.RIS_RAMAConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "\r\nSELECT\t\tRIS_SCHEDULE.ORG_ID\r\n\t\t\t, HIS_REGISTRATION.HN\r\n\t\t\t, dbo.fnGetHISRegistr" +
                "ationFullName(RIS_SCHEDULE.REG_ID,1) AS PAT_THAI_NAME\r\n\t\t\t, dbo.fnGetHISRegistra" +
                "tionFullName(RIS_SCHEDULE.REG_ID,0) AS PAT_ENG_NAME\r\n\t\t\t\t\t, HIS_REGISTRATION.PHO" +
                "NE1\r\n\t\t\t\t\t, HIS_REGISTRATION.DOB\r\n\t\t\t\t\t, RIS_EXAM.EXAM_UID\r\n\t\t\t\t\t, RIS_EXAM.EXAM" +
                "_NAME\r\n\t\t\t\t\t, RIS_SCHEDULE.START_DATETIME as APPOINT_DT\r\n\t\t\t\t\t, CASE isnull(RIS_" +
                "SCHEDULEDTL.QTY,0)\r\n\t\t\t\t\t\t\tWHEN 0 THEN 1*RIS_SCHEDULEDTL.RATE\r\n\t\t\t\t\t\t\tELSE\r\n\t\t\t\t" +
                "\t\t\t\tRIS_SCHEDULEDTL.QTY * RIS_SCHEDULEDTL.RATE\r\n\t\t\t\t\t  END as RATE \r\n\t\t\t\t\t, \'Cli" +
                "nic : \'+RIS_CLINICTYPE.CLINIC_TYPE_TEXT + \' Ward : \'+dbo.fnGetUnitUID(RIS_SCHEDU" +
                "LE.REF_UNIT) as [CLINIC_TYPE_TEXT]\r\n\t\t\t\t\t, RIS_MODALITY.MODALITY_NAME\r\n\t\t\t\t\t, db" +
                "o.fnGetEmpThaiName(RIS_SCHEDULE.CREATED_BY) AS CREATED_BY\r\n\t\t\t\t\t, RIS_SCHEDULE.C" +
                "REATED_ON\r\n\t\t\t\t\t\r\n\t\t\t\t\t, RIS_MODALITY.MODALITY_ID\r\n\t\t\t\t\t--, RIS_EXAMINSTRUCTIONS" +
                ".INS_TEXT\r\n\t\t\t\t\t,\' \' AS [INS_TEXT]\r\n\t\t\t\t\t,\' \' AS EXAM_TYPE_INS\r\n\t\t\t\t\t,\' \' AS HR_" +
                "UNIT_INS\r\n\t\t\t\t\t, HR_UNIT.UNIT_NAME AS UNIT_TITLE\r\n\t\t\t\t\t, dbo.fnGetUnitUID(RIS_SC" +
                "HEDULE.REF_UNIT) AS [UNIT_NAME]\r\n\t\t\t\t\t, \' \' AS [AGE]\r\n\t\t\t\t\t, \' \' as [GENDER]\r\n\t\t" +
                "\t\t\t, RIS_EXAM.CLAIMABLE_AMT\r\n\t\t\t\t\t, RIS_EXAM.NONCLAIMABLE_AMT\r\n\t\t\t\t\t, HR_ROOM.RO" +
                "OM_UID\r\n\t\t\t\t\t, dbo.fnGetInsuranceTypeName(RIS_SCHEDULE.INSURANCE_TYPE_ID) AS INS" +
                "URANCE_TYPE_DESC\r\n,\'\' AS [PATIENT_ID_LABEL]\r\nFROM         HR_ROOM INNER JOIN\r\n  " +
                "                    RIS_SCHEDULE INNER JOIN\r\n                      RIS_SCHEDULED" +
                "TL ON RIS_SCHEDULE.SCHEDULE_ID = RIS_SCHEDULEDTL.SCHEDULE_ID INNER JOIN\r\n       " +
                "               RIS_EXAM ON RIS_SCHEDULEDTL.EXAM_ID = RIS_EXAM.EXAM_ID INNER JOIN" +
                "\r\n                      HIS_REGISTRATION ON RIS_SCHEDULE.REG_ID = HIS_REGISTRATI" +
                "ON.REG_ID LEFT OUTER JOIN\r\n                      HR_UNIT ON RIS_SCHEDULE.REF_UNI" +
                "T = HR_UNIT.UNIT_ID INNER JOIN\r\n                      RIS_MODALITY ON RIS_SCHEDU" +
                "LE.MODALITY_ID = RIS_MODALITY.MODALITY_ID ON HR_ROOM.ROOM_ID = RIS_MODALITY.ROOM" +
                "_ID LEFT OUTER JOIN\r\n                      HR_UNIT AS HR_UNIT_EXAM ON RIS_EXAM.U" +
                "NIT_ID = HR_UNIT_EXAM.UNIT_ID LEFT OUTER JOIN\r\n                      RIS_CLINICS" +
                "ESSION RIGHT OUTER JOIN\r\n                      RIS_CLINICTYPE ON RIS_CLINICSESSI" +
                "ON.CLINIC_TYPE_ID = RIS_CLINICTYPE.CLINIC_TYPE_ID ON \r\n                      RIS" +
                "_SCHEDULE.SESSION_ID = RIS_CLINICSESSION.SESSION_ID LEFT OUTER JOIN\r\n           " +
                "           RIS_EXAMTYPE ON RIS_EXAM.EXAM_TYPE = RIS_EXAMTYPE.EXAM_TYPE_ID LEFT O" +
                "UTER JOIN\r\n                      RIS_EXAMINSTRUCTIONS ON RIS_EXAM.EXAM_ID = RIS_" +
                "EXAMINSTRUCTIONS.EXAM_ID";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsScheduleReport.dataScheduleDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsScheduleReport.dataScheduleDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            dsScheduleReport.dataScheduleDataTable dataTable = new dsScheduleReport.dataScheduleDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private GBL_ENVTableAdapter _gBL_ENVTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public GBL_ENVTableAdapter GBL_ENVTableAdapter {
            get {
                return this._gBL_ENVTableAdapter;
            }
            set {
                this._gBL_ENVTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._gBL_ENVTableAdapter != null) 
                            && (this._gBL_ENVTableAdapter.Connection != null))) {
                    return this._gBL_ENVTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._gBL_ENVTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(dsScheduleReport dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._gBL_ENVTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.GBL_ENV.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._gBL_ENVTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(dsScheduleReport dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._gBL_ENVTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.GBL_ENV.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._gBL_ENVTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(dsScheduleReport dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._gBL_ENVTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.GBL_ENV.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._gBL_ENVTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(dsScheduleReport dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._gBL_ENVTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._gBL_ENVTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._gBL_ENVTableAdapter != null)) {
                    revertConnections.Add(this._gBL_ENVTableAdapter, this._gBL_ENVTableAdapter.Connection);
                    this._gBL_ENVTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._gBL_ENVTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._gBL_ENVTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._gBL_ENVTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._gBL_ENVTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._gBL_ENVTableAdapter != null)) {
                    this._gBL_ENVTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._gBL_ENVTableAdapter]));
                    this._gBL_ENVTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591