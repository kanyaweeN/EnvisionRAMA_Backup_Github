//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace RIS.Plugin.XtraFile.xtraData {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsReport2")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsReport2 : global::System.Data.DataSet {
        
        private Prc_RIS_Rpt_ScheduleCountAppointDataTable tablePrc_RIS_Rpt_ScheduleCountAppoint;
        
        private Prc_ReportExamResultDataTable tablePrc_ReportExamResult;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsReport2() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsReport2(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Prc_RIS_Rpt_ScheduleCountAppoint"] != null)) {
                    base.Tables.Add(new Prc_RIS_Rpt_ScheduleCountAppointDataTable(ds.Tables["Prc_RIS_Rpt_ScheduleCountAppoint"]));
                }
                if ((ds.Tables["Prc_ReportExamResult"] != null)) {
                    base.Tables.Add(new Prc_ReportExamResultDataTable(ds.Tables["Prc_ReportExamResult"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Prc_RIS_Rpt_ScheduleCountAppointDataTable Prc_RIS_Rpt_ScheduleCountAppoint {
            get {
                return this.tablePrc_RIS_Rpt_ScheduleCountAppoint;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Prc_ReportExamResultDataTable Prc_ReportExamResult {
            get {
                return this.tablePrc_ReportExamResult;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsReport2 cln = ((dsReport2)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Prc_RIS_Rpt_ScheduleCountAppoint"] != null)) {
                    base.Tables.Add(new Prc_RIS_Rpt_ScheduleCountAppointDataTable(ds.Tables["Prc_RIS_Rpt_ScheduleCountAppoint"]));
                }
                if ((ds.Tables["Prc_ReportExamResult"] != null)) {
                    base.Tables.Add(new Prc_ReportExamResultDataTable(ds.Tables["Prc_ReportExamResult"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePrc_RIS_Rpt_ScheduleCountAppoint = ((Prc_RIS_Rpt_ScheduleCountAppointDataTable)(base.Tables["Prc_RIS_Rpt_ScheduleCountAppoint"]));
            if ((initTable == true)) {
                if ((this.tablePrc_RIS_Rpt_ScheduleCountAppoint != null)) {
                    this.tablePrc_RIS_Rpt_ScheduleCountAppoint.InitVars();
                }
            }
            this.tablePrc_ReportExamResult = ((Prc_ReportExamResultDataTable)(base.Tables["Prc_ReportExamResult"]));
            if ((initTable == true)) {
                if ((this.tablePrc_ReportExamResult != null)) {
                    this.tablePrc_ReportExamResult.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsReport2";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsReport2.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePrc_RIS_Rpt_ScheduleCountAppoint = new Prc_RIS_Rpt_ScheduleCountAppointDataTable();
            base.Tables.Add(this.tablePrc_RIS_Rpt_ScheduleCountAppoint);
            this.tablePrc_ReportExamResult = new Prc_ReportExamResultDataTable();
            base.Tables.Add(this.tablePrc_ReportExamResult);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrc_RIS_Rpt_ScheduleCountAppoint() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrc_ReportExamResult() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsReport2 ds = new dsReport2();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void Prc_RIS_Rpt_ScheduleCountAppointRowChangeEventHandler(object sender, Prc_RIS_Rpt_ScheduleCountAppointRowChangeEvent e);
        
        public delegate void Prc_ReportExamResultRowChangeEventHandler(object sender, Prc_ReportExamResultRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Prc_RIS_Rpt_ScheduleCountAppointDataTable : global::System.Data.TypedTableBase<Prc_RIS_Rpt_ScheduleCountAppointRow> {
            
            private global::System.Data.DataColumn columnRAD_ID;
            
            private global::System.Data.DataColumn columnRAD_NAME;
            
            private global::System.Data.DataColumn columnSCHEDULE_DT;
            
            private global::System.Data.DataColumn columnEMP_NAME;
            
            private global::System.Data.DataColumn columnUPDATE_DT;
            
            private global::System.Data.DataColumn columnEXAM_ID;
            
            private global::System.Data.DataColumn columnEXAM_UID;
            
            private global::System.Data.DataColumn columnEXAM_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_RIS_Rpt_ScheduleCountAppointDataTable() {
                this.TableName = "Prc_RIS_Rpt_ScheduleCountAppoint";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Prc_RIS_Rpt_ScheduleCountAppointDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Prc_RIS_Rpt_ScheduleCountAppointDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RAD_IDColumn {
                get {
                    return this.columnRAD_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RAD_NAMEColumn {
                get {
                    return this.columnRAD_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCHEDULE_DTColumn {
                get {
                    return this.columnSCHEDULE_DT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMP_NAMEColumn {
                get {
                    return this.columnEMP_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_DTColumn {
                get {
                    return this.columnUPDATE_DT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_IDColumn {
                get {
                    return this.columnEXAM_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_UIDColumn {
                get {
                    return this.columnEXAM_UID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_NAMEColumn {
                get {
                    return this.columnEXAM_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_RIS_Rpt_ScheduleCountAppointRow this[int index] {
                get {
                    return ((Prc_RIS_Rpt_ScheduleCountAppointRow)(this.Rows[index]));
                }
            }
            
            public event Prc_RIS_Rpt_ScheduleCountAppointRowChangeEventHandler Prc_RIS_Rpt_ScheduleCountAppointRowChanging;
            
            public event Prc_RIS_Rpt_ScheduleCountAppointRowChangeEventHandler Prc_RIS_Rpt_ScheduleCountAppointRowChanged;
            
            public event Prc_RIS_Rpt_ScheduleCountAppointRowChangeEventHandler Prc_RIS_Rpt_ScheduleCountAppointRowDeleting;
            
            public event Prc_RIS_Rpt_ScheduleCountAppointRowChangeEventHandler Prc_RIS_Rpt_ScheduleCountAppointRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrc_RIS_Rpt_ScheduleCountAppointRow(Prc_RIS_Rpt_ScheduleCountAppointRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_RIS_Rpt_ScheduleCountAppointRow AddPrc_RIS_Rpt_ScheduleCountAppointRow(int RAD_ID, string RAD_NAME, System.DateTime SCHEDULE_DT, string EMP_NAME, System.DateTime UPDATE_DT, string EXAM_UID, string EXAM_NAME) {
                Prc_RIS_Rpt_ScheduleCountAppointRow rowPrc_RIS_Rpt_ScheduleCountAppointRow = ((Prc_RIS_Rpt_ScheduleCountAppointRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RAD_ID,
                        RAD_NAME,
                        SCHEDULE_DT,
                        EMP_NAME,
                        UPDATE_DT,
                        null,
                        EXAM_UID,
                        EXAM_NAME};
                rowPrc_RIS_Rpt_ScheduleCountAppointRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrc_RIS_Rpt_ScheduleCountAppointRow);
                return rowPrc_RIS_Rpt_ScheduleCountAppointRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_RIS_Rpt_ScheduleCountAppointRow FindByEXAM_ID(int EXAM_ID) {
                return ((Prc_RIS_Rpt_ScheduleCountAppointRow)(this.Rows.Find(new object[] {
                            EXAM_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Prc_RIS_Rpt_ScheduleCountAppointDataTable cln = ((Prc_RIS_Rpt_ScheduleCountAppointDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Prc_RIS_Rpt_ScheduleCountAppointDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRAD_ID = base.Columns["RAD_ID"];
                this.columnRAD_NAME = base.Columns["RAD_NAME"];
                this.columnSCHEDULE_DT = base.Columns["SCHEDULE_DT"];
                this.columnEMP_NAME = base.Columns["EMP_NAME"];
                this.columnUPDATE_DT = base.Columns["UPDATE_DT"];
                this.columnEXAM_ID = base.Columns["EXAM_ID"];
                this.columnEXAM_UID = base.Columns["EXAM_UID"];
                this.columnEXAM_NAME = base.Columns["EXAM_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRAD_ID = new global::System.Data.DataColumn("RAD_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAD_ID);
                this.columnRAD_NAME = new global::System.Data.DataColumn("RAD_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRAD_NAME);
                this.columnSCHEDULE_DT = new global::System.Data.DataColumn("SCHEDULE_DT", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCHEDULE_DT);
                this.columnEMP_NAME = new global::System.Data.DataColumn("EMP_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMP_NAME);
                this.columnUPDATE_DT = new global::System.Data.DataColumn("UPDATE_DT", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_DT);
                this.columnEXAM_ID = new global::System.Data.DataColumn("EXAM_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_ID);
                this.columnEXAM_UID = new global::System.Data.DataColumn("EXAM_UID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_UID);
                this.columnEXAM_NAME = new global::System.Data.DataColumn("EXAM_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_NAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEXAM_ID}, true));
                this.columnRAD_NAME.ReadOnly = true;
                this.columnRAD_NAME.MaxLength = 2147483647;
                this.columnSCHEDULE_DT.AllowDBNull = false;
                this.columnEMP_NAME.ReadOnly = true;
                this.columnEMP_NAME.MaxLength = 2147483647;
                this.columnUPDATE_DT.ReadOnly = true;
                this.columnEXAM_ID.AutoIncrement = true;
                this.columnEXAM_ID.AutoIncrementSeed = -1;
                this.columnEXAM_ID.AutoIncrementStep = -1;
                this.columnEXAM_ID.AllowDBNull = false;
                this.columnEXAM_ID.ReadOnly = true;
                this.columnEXAM_ID.Unique = true;
                this.columnEXAM_UID.MaxLength = 30;
                this.columnEXAM_NAME.AllowDBNull = false;
                this.columnEXAM_NAME.MaxLength = 300;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_RIS_Rpt_ScheduleCountAppointRow NewPrc_RIS_Rpt_ScheduleCountAppointRow() {
                return ((Prc_RIS_Rpt_ScheduleCountAppointRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Prc_RIS_Rpt_ScheduleCountAppointRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Prc_RIS_Rpt_ScheduleCountAppointRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Prc_RIS_Rpt_ScheduleCountAppointRowChanged != null)) {
                    this.Prc_RIS_Rpt_ScheduleCountAppointRowChanged(this, new Prc_RIS_Rpt_ScheduleCountAppointRowChangeEvent(((Prc_RIS_Rpt_ScheduleCountAppointRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Prc_RIS_Rpt_ScheduleCountAppointRowChanging != null)) {
                    this.Prc_RIS_Rpt_ScheduleCountAppointRowChanging(this, new Prc_RIS_Rpt_ScheduleCountAppointRowChangeEvent(((Prc_RIS_Rpt_ScheduleCountAppointRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Prc_RIS_Rpt_ScheduleCountAppointRowDeleted != null)) {
                    this.Prc_RIS_Rpt_ScheduleCountAppointRowDeleted(this, new Prc_RIS_Rpt_ScheduleCountAppointRowChangeEvent(((Prc_RIS_Rpt_ScheduleCountAppointRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Prc_RIS_Rpt_ScheduleCountAppointRowDeleting != null)) {
                    this.Prc_RIS_Rpt_ScheduleCountAppointRowDeleting(this, new Prc_RIS_Rpt_ScheduleCountAppointRowChangeEvent(((Prc_RIS_Rpt_ScheduleCountAppointRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrc_RIS_Rpt_ScheduleCountAppointRow(Prc_RIS_Rpt_ScheduleCountAppointRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsReport2 ds = new dsReport2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Prc_RIS_Rpt_ScheduleCountAppointDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Prc_ReportExamResultDataTable : global::System.Data.TypedTableBase<Prc_ReportExamResultRow> {
            
            private global::System.Data.DataColumn columnHN;
            
            private global::System.Data.DataColumn columnORDER_ID;
            
            private global::System.Data.DataColumn columnORDER_DT;
            
            private global::System.Data.DataColumn columnEXAM_UID;
            
            private global::System.Data.DataColumn columnEXAM_NAME;
            
            private global::System.Data.DataColumn columnPATIENT_NAMETH;
            
            private global::System.Data.DataColumn columnPATIENT_NAMEENG;
            
            private global::System.Data.DataColumn columnGENDER;
            
            private global::System.Data.DataColumn columnDOB;
            
            private global::System.Data.DataColumn columnUNIT_NAME_ALIAS;
            
            private global::System.Data.DataColumn columnACCESSION_NO;
            
            private global::System.Data.DataColumn columnRESULT_STATUS;
            
            private global::System.Data.DataColumn columnRESULT_TEXT_PLAIN;
            
            private global::System.Data.DataColumn columnPRELIM_BY;
            
            private global::System.Data.DataColumn columnPRELIM_FOOTER1;
            
            private global::System.Data.DataColumn columnPRELIM_FOOTER2;
            
            private global::System.Data.DataColumn columnFINALIZED_ON;
            
            private global::System.Data.DataColumn columnFINALIZED_BY;
            
            private global::System.Data.DataColumn columnFINAL_FOOTER1;
            
            private global::System.Data.DataColumn columnFINAL_FOOTER2;
            
            private global::System.Data.DataColumn columnUNIT_NAME;
            
            private global::System.Data.DataColumn columnAge;
            
            private global::System.Data.DataColumn columnRefDoctor;
            
            private global::System.Data.DataColumn columnResultDoctor;
            
            private global::System.Data.DataColumn columnVN;
            
            private global::System.Data.DataColumn columnINSURANCE_TYPE_DESC;
            
            private global::System.Data.DataColumn columnORG_NAME;
            
            private global::System.Data.DataColumn columnORG_SLOGAN1;
            
            private global::System.Data.DataColumn columnORG_SLOGAN2;
            
            private global::System.Data.DataColumn columnORG_ADDR1;
            
            private global::System.Data.DataColumn columnORG_ADDR2;
            
            private global::System.Data.DataColumn columnORG_ADDR3;
            
            private global::System.Data.DataColumn columnORG_ADDR4;
            
            private global::System.Data.DataColumn columnORG_TEL1;
            
            private global::System.Data.DataColumn columnORG_TEL2;
            
            private global::System.Data.DataColumn columnORG_FAX;
            
            private global::System.Data.DataColumn columnORG_EMAIL1;
            
            private global::System.Data.DataColumn columnORG_WEBSITE;
            
            private global::System.Data.DataColumn columnORG_IMG;
            
            private global::System.Data.DataColumn columnExpr1;
            
            private global::System.Data.DataColumn columnCreateOrder;
            
            private global::System.Data.DataColumn columnBPVIEW_DESC;
            
            private global::System.Data.DataColumn columnMERGE;
            
            private global::System.Data.DataColumn columnMERGE_WITH;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_ReportExamResultDataTable() {
                this.TableName = "Prc_ReportExamResult";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Prc_ReportExamResultDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Prc_ReportExamResultDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HNColumn {
                get {
                    return this.columnHN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDER_IDColumn {
                get {
                    return this.columnORDER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDER_DTColumn {
                get {
                    return this.columnORDER_DT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_UIDColumn {
                get {
                    return this.columnEXAM_UID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_NAMEColumn {
                get {
                    return this.columnEXAM_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_NAMETHColumn {
                get {
                    return this.columnPATIENT_NAMETH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_NAMEENGColumn {
                get {
                    return this.columnPATIENT_NAMEENG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GENDERColumn {
                get {
                    return this.columnGENDER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNIT_NAME_ALIASColumn {
                get {
                    return this.columnUNIT_NAME_ALIAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACCESSION_NOColumn {
                get {
                    return this.columnACCESSION_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESULT_STATUSColumn {
                get {
                    return this.columnRESULT_STATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESULT_TEXT_PLAINColumn {
                get {
                    return this.columnRESULT_TEXT_PLAIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRELIM_BYColumn {
                get {
                    return this.columnPRELIM_BY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRELIM_FOOTER1Column {
                get {
                    return this.columnPRELIM_FOOTER1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRELIM_FOOTER2Column {
                get {
                    return this.columnPRELIM_FOOTER2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FINALIZED_ONColumn {
                get {
                    return this.columnFINALIZED_ON;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FINALIZED_BYColumn {
                get {
                    return this.columnFINALIZED_BY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FINAL_FOOTER1Column {
                get {
                    return this.columnFINAL_FOOTER1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FINAL_FOOTER2Column {
                get {
                    return this.columnFINAL_FOOTER2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNIT_NAMEColumn {
                get {
                    return this.columnUNIT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgeColumn {
                get {
                    return this.columnAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefDoctorColumn {
                get {
                    return this.columnRefDoctor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResultDoctorColumn {
                get {
                    return this.columnResultDoctor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VNColumn {
                get {
                    return this.columnVN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INSURANCE_TYPE_DESCColumn {
                get {
                    return this.columnINSURANCE_TYPE_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_NAMEColumn {
                get {
                    return this.columnORG_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_SLOGAN1Column {
                get {
                    return this.columnORG_SLOGAN1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_SLOGAN2Column {
                get {
                    return this.columnORG_SLOGAN2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_ADDR1Column {
                get {
                    return this.columnORG_ADDR1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_ADDR2Column {
                get {
                    return this.columnORG_ADDR2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_ADDR3Column {
                get {
                    return this.columnORG_ADDR3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_ADDR4Column {
                get {
                    return this.columnORG_ADDR4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_TEL1Column {
                get {
                    return this.columnORG_TEL1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_TEL2Column {
                get {
                    return this.columnORG_TEL2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_FAXColumn {
                get {
                    return this.columnORG_FAX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_EMAIL1Column {
                get {
                    return this.columnORG_EMAIL1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_WEBSITEColumn {
                get {
                    return this.columnORG_WEBSITE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORG_IMGColumn {
                get {
                    return this.columnORG_IMG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Expr1Column {
                get {
                    return this.columnExpr1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateOrderColumn {
                get {
                    return this.columnCreateOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BPVIEW_DESCColumn {
                get {
                    return this.columnBPVIEW_DESC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MERGEColumn {
                get {
                    return this.columnMERGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MERGE_WITHColumn {
                get {
                    return this.columnMERGE_WITH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_ReportExamResultRow this[int index] {
                get {
                    return ((Prc_ReportExamResultRow)(this.Rows[index]));
                }
            }
            
            public event Prc_ReportExamResultRowChangeEventHandler Prc_ReportExamResultRowChanging;
            
            public event Prc_ReportExamResultRowChangeEventHandler Prc_ReportExamResultRowChanged;
            
            public event Prc_ReportExamResultRowChangeEventHandler Prc_ReportExamResultRowDeleting;
            
            public event Prc_ReportExamResultRowChangeEventHandler Prc_ReportExamResultRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrc_ReportExamResultRow(Prc_ReportExamResultRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_ReportExamResultRow AddPrc_ReportExamResultRow(
                        string HN, 
                        int ORDER_ID, 
                        System.DateTime ORDER_DT, 
                        string EXAM_UID, 
                        string EXAM_NAME, 
                        string PATIENT_NAMETH, 
                        string PATIENT_NAMEENG, 
                        string GENDER, 
                        System.DateTime DOB, 
                        string UNIT_NAME_ALIAS, 
                        string ACCESSION_NO, 
                        string RESULT_STATUS, 
                        string RESULT_TEXT_PLAIN, 
                        int PRELIM_BY, 
                        string PRELIM_FOOTER1, 
                        string PRELIM_FOOTER2, 
                        System.DateTime FINALIZED_ON, 
                        int FINALIZED_BY, 
                        string FINAL_FOOTER1, 
                        string FINAL_FOOTER2, 
                        string UNIT_NAME, 
                        string Age, 
                        string RefDoctor, 
                        string ResultDoctor, 
                        string VN, 
                        string INSURANCE_TYPE_DESC, 
                        string ORG_NAME, 
                        string ORG_SLOGAN1, 
                        string ORG_SLOGAN2, 
                        string ORG_ADDR1, 
                        string ORG_ADDR2, 
                        string ORG_ADDR3, 
                        string ORG_ADDR4, 
                        string ORG_TEL1, 
                        string ORG_TEL2, 
                        string ORG_FAX, 
                        string ORG_EMAIL1, 
                        string ORG_WEBSITE, 
                        byte[] ORG_IMG, 
                        string Expr1, 
                        string CreateOrder, 
                        string BPVIEW_DESC, 
                        string MERGE, 
                        string MERGE_WITH) {
                Prc_ReportExamResultRow rowPrc_ReportExamResultRow = ((Prc_ReportExamResultRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        HN,
                        ORDER_ID,
                        ORDER_DT,
                        EXAM_UID,
                        EXAM_NAME,
                        PATIENT_NAMETH,
                        PATIENT_NAMEENG,
                        GENDER,
                        DOB,
                        UNIT_NAME_ALIAS,
                        ACCESSION_NO,
                        RESULT_STATUS,
                        RESULT_TEXT_PLAIN,
                        PRELIM_BY,
                        PRELIM_FOOTER1,
                        PRELIM_FOOTER2,
                        FINALIZED_ON,
                        FINALIZED_BY,
                        FINAL_FOOTER1,
                        FINAL_FOOTER2,
                        UNIT_NAME,
                        Age,
                        RefDoctor,
                        ResultDoctor,
                        VN,
                        INSURANCE_TYPE_DESC,
                        ORG_NAME,
                        ORG_SLOGAN1,
                        ORG_SLOGAN2,
                        ORG_ADDR1,
                        ORG_ADDR2,
                        ORG_ADDR3,
                        ORG_ADDR4,
                        ORG_TEL1,
                        ORG_TEL2,
                        ORG_FAX,
                        ORG_EMAIL1,
                        ORG_WEBSITE,
                        ORG_IMG,
                        Expr1,
                        CreateOrder,
                        BPVIEW_DESC,
                        MERGE,
                        MERGE_WITH};
                rowPrc_ReportExamResultRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrc_ReportExamResultRow);
                return rowPrc_ReportExamResultRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Prc_ReportExamResultDataTable cln = ((Prc_ReportExamResultDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Prc_ReportExamResultDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHN = base.Columns["HN"];
                this.columnORDER_ID = base.Columns["ORDER_ID"];
                this.columnORDER_DT = base.Columns["ORDER_DT"];
                this.columnEXAM_UID = base.Columns["EXAM_UID"];
                this.columnEXAM_NAME = base.Columns["EXAM_NAME"];
                this.columnPATIENT_NAMETH = base.Columns["PATIENT_NAMETH"];
                this.columnPATIENT_NAMEENG = base.Columns["PATIENT_NAMEENG"];
                this.columnGENDER = base.Columns["GENDER"];
                this.columnDOB = base.Columns["DOB"];
                this.columnUNIT_NAME_ALIAS = base.Columns["UNIT_NAME_ALIAS"];
                this.columnACCESSION_NO = base.Columns["ACCESSION_NO"];
                this.columnRESULT_STATUS = base.Columns["RESULT_STATUS"];
                this.columnRESULT_TEXT_PLAIN = base.Columns["RESULT_TEXT_PLAIN"];
                this.columnPRELIM_BY = base.Columns["PRELIM_BY"];
                this.columnPRELIM_FOOTER1 = base.Columns["PRELIM_FOOTER1"];
                this.columnPRELIM_FOOTER2 = base.Columns["PRELIM_FOOTER2"];
                this.columnFINALIZED_ON = base.Columns["FINALIZED_ON"];
                this.columnFINALIZED_BY = base.Columns["FINALIZED_BY"];
                this.columnFINAL_FOOTER1 = base.Columns["FINAL_FOOTER1"];
                this.columnFINAL_FOOTER2 = base.Columns["FINAL_FOOTER2"];
                this.columnUNIT_NAME = base.Columns["UNIT_NAME"];
                this.columnAge = base.Columns["Age"];
                this.columnRefDoctor = base.Columns["RefDoctor"];
                this.columnResultDoctor = base.Columns["ResultDoctor"];
                this.columnVN = base.Columns["VN"];
                this.columnINSURANCE_TYPE_DESC = base.Columns["INSURANCE_TYPE_DESC"];
                this.columnORG_NAME = base.Columns["ORG_NAME"];
                this.columnORG_SLOGAN1 = base.Columns["ORG_SLOGAN1"];
                this.columnORG_SLOGAN2 = base.Columns["ORG_SLOGAN2"];
                this.columnORG_ADDR1 = base.Columns["ORG_ADDR1"];
                this.columnORG_ADDR2 = base.Columns["ORG_ADDR2"];
                this.columnORG_ADDR3 = base.Columns["ORG_ADDR3"];
                this.columnORG_ADDR4 = base.Columns["ORG_ADDR4"];
                this.columnORG_TEL1 = base.Columns["ORG_TEL1"];
                this.columnORG_TEL2 = base.Columns["ORG_TEL2"];
                this.columnORG_FAX = base.Columns["ORG_FAX"];
                this.columnORG_EMAIL1 = base.Columns["ORG_EMAIL1"];
                this.columnORG_WEBSITE = base.Columns["ORG_WEBSITE"];
                this.columnORG_IMG = base.Columns["ORG_IMG"];
                this.columnExpr1 = base.Columns["Expr1"];
                this.columnCreateOrder = base.Columns["CreateOrder"];
                this.columnBPVIEW_DESC = base.Columns["BPVIEW_DESC"];
                this.columnMERGE = base.Columns["MERGE"];
                this.columnMERGE_WITH = base.Columns["MERGE_WITH"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHN = new global::System.Data.DataColumn("HN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHN);
                this.columnORDER_ID = new global::System.Data.DataColumn("ORDER_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDER_ID);
                this.columnORDER_DT = new global::System.Data.DataColumn("ORDER_DT", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDER_DT);
                this.columnEXAM_UID = new global::System.Data.DataColumn("EXAM_UID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_UID);
                this.columnEXAM_NAME = new global::System.Data.DataColumn("EXAM_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_NAME);
                this.columnPATIENT_NAMETH = new global::System.Data.DataColumn("PATIENT_NAMETH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_NAMETH);
                this.columnPATIENT_NAMEENG = new global::System.Data.DataColumn("PATIENT_NAMEENG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_NAMEENG);
                this.columnGENDER = new global::System.Data.DataColumn("GENDER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGENDER);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
                this.columnUNIT_NAME_ALIAS = new global::System.Data.DataColumn("UNIT_NAME_ALIAS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT_NAME_ALIAS);
                this.columnACCESSION_NO = new global::System.Data.DataColumn("ACCESSION_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCESSION_NO);
                this.columnRESULT_STATUS = new global::System.Data.DataColumn("RESULT_STATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESULT_STATUS);
                this.columnRESULT_TEXT_PLAIN = new global::System.Data.DataColumn("RESULT_TEXT_PLAIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESULT_TEXT_PLAIN);
                this.columnPRELIM_BY = new global::System.Data.DataColumn("PRELIM_BY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRELIM_BY);
                this.columnPRELIM_FOOTER1 = new global::System.Data.DataColumn("PRELIM_FOOTER1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRELIM_FOOTER1);
                this.columnPRELIM_FOOTER2 = new global::System.Data.DataColumn("PRELIM_FOOTER2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRELIM_FOOTER2);
                this.columnFINALIZED_ON = new global::System.Data.DataColumn("FINALIZED_ON", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFINALIZED_ON);
                this.columnFINALIZED_BY = new global::System.Data.DataColumn("FINALIZED_BY", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFINALIZED_BY);
                this.columnFINAL_FOOTER1 = new global::System.Data.DataColumn("FINAL_FOOTER1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFINAL_FOOTER1);
                this.columnFINAL_FOOTER2 = new global::System.Data.DataColumn("FINAL_FOOTER2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFINAL_FOOTER2);
                this.columnUNIT_NAME = new global::System.Data.DataColumn("UNIT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT_NAME);
                this.columnAge = new global::System.Data.DataColumn("Age", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAge);
                this.columnRefDoctor = new global::System.Data.DataColumn("RefDoctor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefDoctor);
                this.columnResultDoctor = new global::System.Data.DataColumn("ResultDoctor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResultDoctor);
                this.columnVN = new global::System.Data.DataColumn("VN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVN);
                this.columnINSURANCE_TYPE_DESC = new global::System.Data.DataColumn("INSURANCE_TYPE_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINSURANCE_TYPE_DESC);
                this.columnORG_NAME = new global::System.Data.DataColumn("ORG_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_NAME);
                this.columnORG_SLOGAN1 = new global::System.Data.DataColumn("ORG_SLOGAN1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_SLOGAN1);
                this.columnORG_SLOGAN2 = new global::System.Data.DataColumn("ORG_SLOGAN2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_SLOGAN2);
                this.columnORG_ADDR1 = new global::System.Data.DataColumn("ORG_ADDR1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_ADDR1);
                this.columnORG_ADDR2 = new global::System.Data.DataColumn("ORG_ADDR2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_ADDR2);
                this.columnORG_ADDR3 = new global::System.Data.DataColumn("ORG_ADDR3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_ADDR3);
                this.columnORG_ADDR4 = new global::System.Data.DataColumn("ORG_ADDR4", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_ADDR4);
                this.columnORG_TEL1 = new global::System.Data.DataColumn("ORG_TEL1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_TEL1);
                this.columnORG_TEL2 = new global::System.Data.DataColumn("ORG_TEL2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_TEL2);
                this.columnORG_FAX = new global::System.Data.DataColumn("ORG_FAX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_FAX);
                this.columnORG_EMAIL1 = new global::System.Data.DataColumn("ORG_EMAIL1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_EMAIL1);
                this.columnORG_WEBSITE = new global::System.Data.DataColumn("ORG_WEBSITE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_WEBSITE);
                this.columnORG_IMG = new global::System.Data.DataColumn("ORG_IMG", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORG_IMG);
                this.columnExpr1 = new global::System.Data.DataColumn("Expr1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpr1);
                this.columnCreateOrder = new global::System.Data.DataColumn("CreateOrder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateOrder);
                this.columnBPVIEW_DESC = new global::System.Data.DataColumn("BPVIEW_DESC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBPVIEW_DESC);
                this.columnMERGE = new global::System.Data.DataColumn("MERGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMERGE);
                this.columnMERGE_WITH = new global::System.Data.DataColumn("MERGE_WITH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMERGE_WITH);
                this.columnHN.MaxLength = 30;
                this.columnEXAM_UID.MaxLength = 30;
                this.columnEXAM_NAME.MaxLength = 300;
                this.columnPATIENT_NAMETH.MaxLength = 300;
                this.columnPATIENT_NAMEENG.MaxLength = 300;
                this.columnGENDER.MaxLength = 10;
                this.columnUNIT_NAME_ALIAS.MaxLength = 100;
                this.columnACCESSION_NO.MaxLength = 30;
                this.columnRESULT_STATUS.MaxLength = 1;
                this.columnRESULT_TEXT_PLAIN.MaxLength = 300;
                this.columnPRELIM_FOOTER1.MaxLength = 300;
                this.columnPRELIM_FOOTER2.MaxLength = 300;
                this.columnFINAL_FOOTER1.MaxLength = 30;
                this.columnFINAL_FOOTER2.MaxLength = 30;
                this.columnUNIT_NAME.MaxLength = 30;
                this.columnAge.MaxLength = 30;
                this.columnRefDoctor.MaxLength = 30;
                this.columnResultDoctor.MaxLength = 30;
                this.columnVN.MaxLength = 1;
                this.columnINSURANCE_TYPE_DESC.MaxLength = 30;
                this.columnORG_NAME.MaxLength = 100;
                this.columnORG_SLOGAN1.MaxLength = 100;
                this.columnORG_SLOGAN2.MaxLength = 100;
                this.columnORG_ADDR1.MaxLength = 100;
                this.columnORG_ADDR2.MaxLength = 100;
                this.columnORG_ADDR3.MaxLength = 100;
                this.columnORG_ADDR4.MaxLength = 100;
                this.columnORG_TEL1.MaxLength = 100;
                this.columnORG_TEL2.MaxLength = 100;
                this.columnORG_FAX.MaxLength = 100;
                this.columnORG_EMAIL1.MaxLength = 100;
                this.columnORG_WEBSITE.MaxLength = 100;
                this.columnExpr1.MaxLength = 2147483647;
                this.columnCreateOrder.MaxLength = 100;
                this.columnBPVIEW_DESC.MaxLength = 200;
                this.columnMERGE.MaxLength = 100;
                this.columnMERGE_WITH.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_ReportExamResultRow NewPrc_ReportExamResultRow() {
                return ((Prc_ReportExamResultRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Prc_ReportExamResultRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Prc_ReportExamResultRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Prc_ReportExamResultRowChanged != null)) {
                    this.Prc_ReportExamResultRowChanged(this, new Prc_ReportExamResultRowChangeEvent(((Prc_ReportExamResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Prc_ReportExamResultRowChanging != null)) {
                    this.Prc_ReportExamResultRowChanging(this, new Prc_ReportExamResultRowChangeEvent(((Prc_ReportExamResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Prc_ReportExamResultRowDeleted != null)) {
                    this.Prc_ReportExamResultRowDeleted(this, new Prc_ReportExamResultRowChangeEvent(((Prc_ReportExamResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Prc_ReportExamResultRowDeleting != null)) {
                    this.Prc_ReportExamResultRowDeleting(this, new Prc_ReportExamResultRowChangeEvent(((Prc_ReportExamResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrc_ReportExamResultRow(Prc_ReportExamResultRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsReport2 ds = new dsReport2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Prc_ReportExamResultDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Prc_RIS_Rpt_ScheduleCountAppointRow : global::System.Data.DataRow {
            
            private Prc_RIS_Rpt_ScheduleCountAppointDataTable tablePrc_RIS_Rpt_ScheduleCountAppoint;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Prc_RIS_Rpt_ScheduleCountAppointRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrc_RIS_Rpt_ScheduleCountAppoint = ((Prc_RIS_Rpt_ScheduleCountAppointDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RAD_ID {
                get {
                    try {
                        return ((int)(this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.RAD_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RAD_ID\' in table \'Prc_RIS_Rpt_ScheduleCountAppoint\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.RAD_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RAD_NAME {
                get {
                    try {
                        return ((string)(this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.RAD_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RAD_NAME\' in table \'Prc_RIS_Rpt_ScheduleCountAppoint\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.RAD_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SCHEDULE_DT {
                get {
                    return ((global::System.DateTime)(this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.SCHEDULE_DTColumn]));
                }
                set {
                    this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.SCHEDULE_DTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMP_NAME {
                get {
                    try {
                        return ((string)(this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.EMP_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EMP_NAME\' in table \'Prc_RIS_Rpt_ScheduleCountAppoint\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.EMP_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATE_DT {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.UPDATE_DTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_DT\' in table \'Prc_RIS_Rpt_ScheduleCountAppoint\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.UPDATE_DTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EXAM_ID {
                get {
                    return ((int)(this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.EXAM_IDColumn]));
                }
                set {
                    this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.EXAM_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_UID {
                get {
                    try {
                        return ((string)(this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.EXAM_UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXAM_UID\' in table \'Prc_RIS_Rpt_ScheduleCountAppoint\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.EXAM_UIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_NAME {
                get {
                    return ((string)(this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.EXAM_NAMEColumn]));
                }
                set {
                    this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.EXAM_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRAD_IDNull() {
                return this.IsNull(this.tablePrc_RIS_Rpt_ScheduleCountAppoint.RAD_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRAD_IDNull() {
                this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.RAD_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRAD_NAMENull() {
                return this.IsNull(this.tablePrc_RIS_Rpt_ScheduleCountAppoint.RAD_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRAD_NAMENull() {
                this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.RAD_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMP_NAMENull() {
                return this.IsNull(this.tablePrc_RIS_Rpt_ScheduleCountAppoint.EMP_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMP_NAMENull() {
                this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.EMP_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_DTNull() {
                return this.IsNull(this.tablePrc_RIS_Rpt_ScheduleCountAppoint.UPDATE_DTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_DTNull() {
                this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.UPDATE_DTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXAM_UIDNull() {
                return this.IsNull(this.tablePrc_RIS_Rpt_ScheduleCountAppoint.EXAM_UIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXAM_UIDNull() {
                this[this.tablePrc_RIS_Rpt_ScheduleCountAppoint.EXAM_UIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Prc_ReportExamResultRow : global::System.Data.DataRow {
            
            private Prc_ReportExamResultDataTable tablePrc_ReportExamResult;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Prc_ReportExamResultRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrc_ReportExamResult = ((Prc_ReportExamResultDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HN {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.HNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HN\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.HNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ORDER_ID {
                get {
                    try {
                        return ((int)(this[this.tablePrc_ReportExamResult.ORDER_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORDER_ID\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORDER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ORDER_DT {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrc_ReportExamResult.ORDER_DTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORDER_DT\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORDER_DTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_UID {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.EXAM_UIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXAM_UID\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.EXAM_UIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_NAME {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.EXAM_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EXAM_NAME\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.EXAM_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_NAMETH {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.PATIENT_NAMETHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PATIENT_NAMETH\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.PATIENT_NAMETHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_NAMEENG {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.PATIENT_NAMEENGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PATIENT_NAMEENG\' in table \'Prc_ReportExamResult\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.PATIENT_NAMEENGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GENDER {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.GENDERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GENDER\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.GENDERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOB {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrc_ReportExamResult.DOBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOB\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIT_NAME_ALIAS {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.UNIT_NAME_ALIASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNIT_NAME_ALIAS\' in table \'Prc_ReportExamResult\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.UNIT_NAME_ALIASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ACCESSION_NO {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ACCESSION_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACCESSION_NO\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ACCESSION_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RESULT_STATUS {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.RESULT_STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RESULT_STATUS\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.RESULT_STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RESULT_TEXT_PLAIN {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.RESULT_TEXT_PLAINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RESULT_TEXT_PLAIN\' in table \'Prc_ReportExamResult\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.RESULT_TEXT_PLAINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PRELIM_BY {
                get {
                    try {
                        return ((int)(this[this.tablePrc_ReportExamResult.PRELIM_BYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRELIM_BY\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.PRELIM_BYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRELIM_FOOTER1 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.PRELIM_FOOTER1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRELIM_FOOTER1\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.PRELIM_FOOTER1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRELIM_FOOTER2 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.PRELIM_FOOTER2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRELIM_FOOTER2\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.PRELIM_FOOTER2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FINALIZED_ON {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePrc_ReportExamResult.FINALIZED_ONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FINALIZED_ON\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.FINALIZED_ONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FINALIZED_BY {
                get {
                    try {
                        return ((int)(this[this.tablePrc_ReportExamResult.FINALIZED_BYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FINALIZED_BY\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.FINALIZED_BYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FINAL_FOOTER1 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.FINAL_FOOTER1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FINAL_FOOTER1\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.FINAL_FOOTER1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FINAL_FOOTER2 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.FINAL_FOOTER2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FINAL_FOOTER2\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.FINAL_FOOTER2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIT_NAME {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.UNIT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNIT_NAME\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.UNIT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Age {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.AgeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Age\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.AgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RefDoctor {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.RefDoctorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefDoctor\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.RefDoctorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResultDoctor {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ResultDoctorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResultDoctor\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ResultDoctorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VN {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.VNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VN\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.VNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INSURANCE_TYPE_DESC {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.INSURANCE_TYPE_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INSURANCE_TYPE_DESC\' in table \'Prc_ReportExamResult\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.INSURANCE_TYPE_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_NAME {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ORG_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_NAME\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_SLOGAN1 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ORG_SLOGAN1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_SLOGAN1\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_SLOGAN1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_SLOGAN2 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ORG_SLOGAN2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_SLOGAN2\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_SLOGAN2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_ADDR1 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ORG_ADDR1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_ADDR1\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_ADDR1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_ADDR2 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ORG_ADDR2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_ADDR2\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_ADDR2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_ADDR3 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ORG_ADDR3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_ADDR3\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_ADDR3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_ADDR4 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ORG_ADDR4Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_ADDR4\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_ADDR4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_TEL1 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ORG_TEL1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_TEL1\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_TEL1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_TEL2 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ORG_TEL2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_TEL2\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_TEL2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_FAX {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ORG_FAXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_FAX\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_FAXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_EMAIL1 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ORG_EMAIL1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_EMAIL1\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_EMAIL1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORG_WEBSITE {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.ORG_WEBSITEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_WEBSITE\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_WEBSITEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] ORG_IMG {
                get {
                    try {
                        return ((byte[])(this[this.tablePrc_ReportExamResult.ORG_IMGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORG_IMG\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.ORG_IMGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Expr1 {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.Expr1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Expr1\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.Expr1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreateOrder {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.CreateOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreateOrder\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.CreateOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BPVIEW_DESC {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.BPVIEW_DESCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BPVIEW_DESC\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.BPVIEW_DESCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MERGE {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.MERGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MERGE\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.MERGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MERGE_WITH {
                get {
                    try {
                        return ((string)(this[this.tablePrc_ReportExamResult.MERGE_WITHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MERGE_WITH\' in table \'Prc_ReportExamResult\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrc_ReportExamResult.MERGE_WITHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHNNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.HNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHNNull() {
                this[this.tablePrc_ReportExamResult.HNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORDER_IDNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORDER_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORDER_IDNull() {
                this[this.tablePrc_ReportExamResult.ORDER_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORDER_DTNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORDER_DTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORDER_DTNull() {
                this[this.tablePrc_ReportExamResult.ORDER_DTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXAM_UIDNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.EXAM_UIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXAM_UIDNull() {
                this[this.tablePrc_ReportExamResult.EXAM_UIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXAM_NAMENull() {
                return this.IsNull(this.tablePrc_ReportExamResult.EXAM_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXAM_NAMENull() {
                this[this.tablePrc_ReportExamResult.EXAM_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_NAMETHNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.PATIENT_NAMETHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_NAMETHNull() {
                this[this.tablePrc_ReportExamResult.PATIENT_NAMETHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_NAMEENGNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.PATIENT_NAMEENGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_NAMEENGNull() {
                this[this.tablePrc_ReportExamResult.PATIENT_NAMEENGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGENDERNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.GENDERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGENDERNull() {
                this[this.tablePrc_ReportExamResult.GENDERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOBNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.DOBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOBNull() {
                this[this.tablePrc_ReportExamResult.DOBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNIT_NAME_ALIASNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.UNIT_NAME_ALIASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNIT_NAME_ALIASNull() {
                this[this.tablePrc_ReportExamResult.UNIT_NAME_ALIASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACCESSION_NONull() {
                return this.IsNull(this.tablePrc_ReportExamResult.ACCESSION_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACCESSION_NONull() {
                this[this.tablePrc_ReportExamResult.ACCESSION_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRESULT_STATUSNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.RESULT_STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRESULT_STATUSNull() {
                this[this.tablePrc_ReportExamResult.RESULT_STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRESULT_TEXT_PLAINNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.RESULT_TEXT_PLAINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRESULT_TEXT_PLAINNull() {
                this[this.tablePrc_ReportExamResult.RESULT_TEXT_PLAINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRELIM_BYNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.PRELIM_BYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRELIM_BYNull() {
                this[this.tablePrc_ReportExamResult.PRELIM_BYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRELIM_FOOTER1Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.PRELIM_FOOTER1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRELIM_FOOTER1Null() {
                this[this.tablePrc_ReportExamResult.PRELIM_FOOTER1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRELIM_FOOTER2Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.PRELIM_FOOTER2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRELIM_FOOTER2Null() {
                this[this.tablePrc_ReportExamResult.PRELIM_FOOTER2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFINALIZED_ONNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.FINALIZED_ONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFINALIZED_ONNull() {
                this[this.tablePrc_ReportExamResult.FINALIZED_ONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFINALIZED_BYNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.FINALIZED_BYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFINALIZED_BYNull() {
                this[this.tablePrc_ReportExamResult.FINALIZED_BYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFINAL_FOOTER1Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.FINAL_FOOTER1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFINAL_FOOTER1Null() {
                this[this.tablePrc_ReportExamResult.FINAL_FOOTER1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFINAL_FOOTER2Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.FINAL_FOOTER2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFINAL_FOOTER2Null() {
                this[this.tablePrc_ReportExamResult.FINAL_FOOTER2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNIT_NAMENull() {
                return this.IsNull(this.tablePrc_ReportExamResult.UNIT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNIT_NAMENull() {
                this[this.tablePrc_ReportExamResult.UNIT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.AgeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeNull() {
                this[this.tablePrc_ReportExamResult.AgeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefDoctorNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.RefDoctorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefDoctorNull() {
                this[this.tablePrc_ReportExamResult.RefDoctorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResultDoctorNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.ResultDoctorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResultDoctorNull() {
                this[this.tablePrc_ReportExamResult.ResultDoctorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVNNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.VNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVNNull() {
                this[this.tablePrc_ReportExamResult.VNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINSURANCE_TYPE_DESCNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.INSURANCE_TYPE_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINSURANCE_TYPE_DESCNull() {
                this[this.tablePrc_ReportExamResult.INSURANCE_TYPE_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_NAMENull() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_NAMENull() {
                this[this.tablePrc_ReportExamResult.ORG_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_SLOGAN1Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_SLOGAN1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_SLOGAN1Null() {
                this[this.tablePrc_ReportExamResult.ORG_SLOGAN1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_SLOGAN2Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_SLOGAN2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_SLOGAN2Null() {
                this[this.tablePrc_ReportExamResult.ORG_SLOGAN2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_ADDR1Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_ADDR1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_ADDR1Null() {
                this[this.tablePrc_ReportExamResult.ORG_ADDR1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_ADDR2Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_ADDR2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_ADDR2Null() {
                this[this.tablePrc_ReportExamResult.ORG_ADDR2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_ADDR3Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_ADDR3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_ADDR3Null() {
                this[this.tablePrc_ReportExamResult.ORG_ADDR3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_ADDR4Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_ADDR4Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_ADDR4Null() {
                this[this.tablePrc_ReportExamResult.ORG_ADDR4Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_TEL1Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_TEL1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_TEL1Null() {
                this[this.tablePrc_ReportExamResult.ORG_TEL1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_TEL2Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_TEL2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_TEL2Null() {
                this[this.tablePrc_ReportExamResult.ORG_TEL2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_FAXNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_FAXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_FAXNull() {
                this[this.tablePrc_ReportExamResult.ORG_FAXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_EMAIL1Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_EMAIL1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_EMAIL1Null() {
                this[this.tablePrc_ReportExamResult.ORG_EMAIL1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_WEBSITENull() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_WEBSITEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_WEBSITENull() {
                this[this.tablePrc_ReportExamResult.ORG_WEBSITEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORG_IMGNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.ORG_IMGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORG_IMGNull() {
                this[this.tablePrc_ReportExamResult.ORG_IMGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpr1Null() {
                return this.IsNull(this.tablePrc_ReportExamResult.Expr1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpr1Null() {
                this[this.tablePrc_ReportExamResult.Expr1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateOrderNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.CreateOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateOrderNull() {
                this[this.tablePrc_ReportExamResult.CreateOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBPVIEW_DESCNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.BPVIEW_DESCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBPVIEW_DESCNull() {
                this[this.tablePrc_ReportExamResult.BPVIEW_DESCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMERGENull() {
                return this.IsNull(this.tablePrc_ReportExamResult.MERGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMERGENull() {
                this[this.tablePrc_ReportExamResult.MERGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMERGE_WITHNull() {
                return this.IsNull(this.tablePrc_ReportExamResult.MERGE_WITHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMERGE_WITHNull() {
                this[this.tablePrc_ReportExamResult.MERGE_WITHColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Prc_RIS_Rpt_ScheduleCountAppointRowChangeEvent : global::System.EventArgs {
            
            private Prc_RIS_Rpt_ScheduleCountAppointRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_RIS_Rpt_ScheduleCountAppointRowChangeEvent(Prc_RIS_Rpt_ScheduleCountAppointRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_RIS_Rpt_ScheduleCountAppointRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Prc_ReportExamResultRowChangeEvent : global::System.EventArgs {
            
            private Prc_ReportExamResultRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_ReportExamResultRowChangeEvent(Prc_ReportExamResultRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Prc_ReportExamResultRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace RIS.Plugin.XtraFile.xtraData.dsReport2TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Prc_RIS_Rpt_ScheduleCountAppointTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Prc_RIS_Rpt_ScheduleCountAppointTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Prc_RIS_Rpt_ScheduleCountAppoint";
            tableMapping.ColumnMappings.Add("RAD_ID", "RAD_ID");
            tableMapping.ColumnMappings.Add("RAD_NAME", "RAD_NAME");
            tableMapping.ColumnMappings.Add("SCHEDULE_DT", "SCHEDULE_DT");
            tableMapping.ColumnMappings.Add("EMP_NAME", "EMP_NAME");
            tableMapping.ColumnMappings.Add("UPDATE_DT", "UPDATE_DT");
            tableMapping.ColumnMappings.Add("EXAM_ID", "EXAM_ID");
            tableMapping.ColumnMappings.Add("EXAM_UID", "EXAM_UID");
            tableMapping.ColumnMappings.Add("EXAM_NAME", "EXAM_NAME");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RIS.Plugin.Properties.Settings.Default.RIS_RAMAConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.Prc_RIS_Rpt_ScheduleCountAppoint";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MODALITY", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FROMDATE", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ENDDATE", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 23, 3, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsReport2.Prc_RIS_Rpt_ScheduleCountAppointDataTable dataTable, global::System.Nullable<int> MODALITY, global::System.Nullable<global::System.DateTime> FROMDATE, global::System.Nullable<global::System.DateTime> ENDDATE) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((MODALITY.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(MODALITY.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((FROMDATE.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(FROMDATE.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ENDDATE.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(ENDDATE.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsReport2.Prc_RIS_Rpt_ScheduleCountAppointDataTable GetData(global::System.Nullable<int> MODALITY, global::System.Nullable<global::System.DateTime> FROMDATE, global::System.Nullable<global::System.DateTime> ENDDATE) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((MODALITY.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(MODALITY.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((FROMDATE.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(FROMDATE.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((ENDDATE.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(ENDDATE.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            dsReport2.Prc_RIS_Rpt_ScheduleCountAppointDataTable dataTable = new dsReport2.Prc_RIS_Rpt_ScheduleCountAppointDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Prc_ReportExamResultTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Prc_ReportExamResultTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Prc_ReportExamResult";
            tableMapping.ColumnMappings.Add("HN", "HN");
            tableMapping.ColumnMappings.Add("ORDER_ID", "ORDER_ID");
            tableMapping.ColumnMappings.Add("ORDER_DT", "ORDER_DT");
            tableMapping.ColumnMappings.Add("EXAM_UID", "EXAM_UID");
            tableMapping.ColumnMappings.Add("EXAM_NAME", "EXAM_NAME");
            tableMapping.ColumnMappings.Add("PATIENT_NAMETH", "PATIENT_NAMETH");
            tableMapping.ColumnMappings.Add("PATIENT_NAMEENG", "PATIENT_NAMEENG");
            tableMapping.ColumnMappings.Add("GENDER", "GENDER");
            tableMapping.ColumnMappings.Add("DOB", "DOB");
            tableMapping.ColumnMappings.Add("UNIT_NAME_ALIAS", "UNIT_NAME_ALIAS");
            tableMapping.ColumnMappings.Add("ACCESSION_NO", "ACCESSION_NO");
            tableMapping.ColumnMappings.Add("RESULT_STATUS", "RESULT_STATUS");
            tableMapping.ColumnMappings.Add("RESULT_TEXT_PLAIN", "RESULT_TEXT_PLAIN");
            tableMapping.ColumnMappings.Add("PRELIM_BY", "PRELIM_BY");
            tableMapping.ColumnMappings.Add("PRELIM_FOOTER1", "PRELIM_FOOTER1");
            tableMapping.ColumnMappings.Add("PRELIM_FOOTER2", "PRELIM_FOOTER2");
            tableMapping.ColumnMappings.Add("FINALIZED_ON", "FINALIZED_ON");
            tableMapping.ColumnMappings.Add("FINALIZED_BY", "FINALIZED_BY");
            tableMapping.ColumnMappings.Add("FINAL_FOOTER1", "FINAL_FOOTER1");
            tableMapping.ColumnMappings.Add("FINAL_FOOTER2", "FINAL_FOOTER2");
            tableMapping.ColumnMappings.Add("UNIT_NAME", "UNIT_NAME");
            tableMapping.ColumnMappings.Add("Age", "Age");
            tableMapping.ColumnMappings.Add("RefDoctor", "RefDoctor");
            tableMapping.ColumnMappings.Add("ResultDoctor", "ResultDoctor");
            tableMapping.ColumnMappings.Add("VN", "VN");
            tableMapping.ColumnMappings.Add("INSURANCE_TYPE_DESC", "INSURANCE_TYPE_DESC");
            tableMapping.ColumnMappings.Add("ORG_NAME", "ORG_NAME");
            tableMapping.ColumnMappings.Add("ORG_SLOGAN1", "ORG_SLOGAN1");
            tableMapping.ColumnMappings.Add("ORG_SLOGAN2", "ORG_SLOGAN2");
            tableMapping.ColumnMappings.Add("ORG_ADDR1", "ORG_ADDR1");
            tableMapping.ColumnMappings.Add("ORG_ADDR2", "ORG_ADDR2");
            tableMapping.ColumnMappings.Add("ORG_ADDR3", "ORG_ADDR3");
            tableMapping.ColumnMappings.Add("ORG_ADDR4", "ORG_ADDR4");
            tableMapping.ColumnMappings.Add("ORG_TEL1", "ORG_TEL1");
            tableMapping.ColumnMappings.Add("ORG_TEL2", "ORG_TEL2");
            tableMapping.ColumnMappings.Add("ORG_FAX", "ORG_FAX");
            tableMapping.ColumnMappings.Add("ORG_EMAIL1", "ORG_EMAIL1");
            tableMapping.ColumnMappings.Add("ORG_WEBSITE", "ORG_WEBSITE");
            tableMapping.ColumnMappings.Add("ORG_IMG", "ORG_IMG");
            tableMapping.ColumnMappings.Add("Expr1", "Expr1");
            tableMapping.ColumnMappings.Add("CreateOrder", "CreateOrder");
            tableMapping.ColumnMappings.Add("BPVIEW_DESC", "BPVIEW_DESC");
            tableMapping.ColumnMappings.Add("MERGE", "MERGE");
            tableMapping.ColumnMappings.Add("MERGE_WITH", "MERGE_WITH");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::RIS.Plugin.Properties.Settings.Default.RIS_RAMAConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "dbo.Prc_ReportExamResult";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.StoredProcedure;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.ReturnValue, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SP_TYPE", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ACCESSION_NO", global::System.Data.SqlDbType.VarChar, 30, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ORG_ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 10, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(dsReport2.Prc_ReportExamResultDataTable dataTable, global::System.Nullable<int> SP_TYPE, string ACCESSION_NO, global::System.Nullable<int> ORG_ID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((SP_TYPE.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(SP_TYPE.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ACCESSION_NO == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(ACCESSION_NO));
            }
            if ((ORG_ID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((int)(ORG_ID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual dsReport2.Prc_ReportExamResultDataTable GetData(global::System.Nullable<int> SP_TYPE, string ACCESSION_NO, global::System.Nullable<int> ORG_ID) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((SP_TYPE.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((int)(SP_TYPE.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((ACCESSION_NO == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(ACCESSION_NO));
            }
            if ((ORG_ID.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((int)(ORG_ID.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            dsReport2.Prc_ReportExamResultDataTable dataTable = new dsReport2.Prc_ReportExamResultDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(dsReport2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(dsReport2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(dsReport2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(dsReport2 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591